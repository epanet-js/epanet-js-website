{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"cookies-policy/","title":"Cookies Policy","text":""},{"location":"cookies-policy/#introduction","title":"INTRODUCTION","text":"<p>Iterating Inc. (hereinafter, \u201cIterating\u201d or \u201cwe\u201d) owns the domain names \u201cepanetjs.com\u201d, \u201cmasteringwater.com\u201d and \u201citerating.ca\u201d, as well as the website we make available to our users (hereinafter, the \u201cWebsite\u201d).</p> <p>We, in our capacity as data controllers, use cookies to enable traffic analysis, which allows us to manage and control the operation of our Website, as well as to improve the content and services we offer.</p> <p>However, you can decide to give your consent to accept, adjust, or reject these cookies. Here we show you more information about our cookies. Please remember that obtaining your informed consent through a clear affirmative action will only be required for the use of cookies that need it.</p> <p>For more information about the processing of your data, you can consult our Privacy Policy.</p>"},{"location":"cookies-policy/#information-about-cookies","title":"INFORMATION ABOUT COOKIES","text":""},{"location":"cookies-policy/#what-is-a-cookie","title":"What is a cookie?","text":"<p>\u201cCookies\u201d are compressed text files that allow data specifically related to the device used when you visit a website to be saved. Cookies are just data; they are not software or script (code).</p> <p>Cookies are essential for our Website to function. In general, they are useful for websites to adapt to user settings or preferences, and to store data about the visit or to save a Browse session. However, these are not their only purposes.</p> <p>Cookies are NOT viruses. Cookies have a simple text format. They are not coded fragments, so they cannot be executed, much less do they run automatically.</p>"},{"location":"cookies-policy/#types-and-definition-of-cookies-we-use","title":"Types and definition of cookies we use.","text":"<p>We can define cookies based on criteria such as their ownership or who manages them, and their duration on the device. We can find the following types:</p> <ul> <li>First-party cookies: These are cookies sent to the user's terminal equipment from a computer or domain managed by the editor itself, and from which the service requested by the user is provided.</li> <li>Third-party cookies: These are cookies sent to the user's terminal equipment from a computer or domain that is not managed by the editor, but by another entity that processes data obtained through the cookies.</li> <li>Session cookies: These are designed to collect and store data while the user accesses a web page. They are usually used to store information that is only of interest for the provision of the service requested by the user on a single occasion (for example, a list of purchased products) and disappear at the end of the session.</li> <li>Persistent cookies: These are cookies where data remains stored on the terminal and can be accessed and processed for a period defined by the cookie's controller, which can range from a few minutes to several years.</li> </ul> <p>In the tables in the following section, you will find a series of practical examples of cookies we use for better comprehension and understanding. In the table, you will find information about the ownership of the cookie explained above; those whose recipient is Iterating will be considered first-party, and the rest will correspond to third parties.</p> <p>Likewise, there is another complementary classification with five types of cookies according to the purpose for which the obtained data are processed:</p> <ul> <li>Technical cookies: dedicated to the maintenance and operation of the website. These cookies are strictly necessary, as they are required for the use and access to the website. Specifically, they allow the user to navigate through a web page and use the different options or services that exist on it, such as identifying the session, controlling traffic and data communication, etc.</li> </ul> COOKIE ORIGIN NAME DATA CATEGORIES RECIPIENTS PURPOSES DURATION First-party (Clerk) Session ID, authentication status Iterating Inc. (via Clerk) User session management, authentication. Session First-party (Clerk) User access token Iterating Inc. (via Clerk) Keep user session active Persistent (e.g., 1 year) <ul> <li>Analytics or measurement cookies: These allow the controller to monitor and analyse the behaviour of users of the websites to which they are linked. The information collected through these cookies is used in the measurement of website activity, in order to introduce improvements based on the analysis of user data.</li> <li>Examples at Iterating Inc. (PostHog): PostHog is used to record user actions within the application and analyse behaviour to improve the product. Of this type of cookies, the following are specifically used on our Website:</li> </ul> COOKIE ORIGIN NAME DATA CATEGORIES RECIPIENTS PURPOSES DURATION Third-party (PostHog) Pseudonymized user ID, in-app activity PostHog Product usage analysis, feature improvement. Persistent (e.g., 1 year) Third-party (PostHog) Session ID PostHog Grouping events from the same session.. Session <ul> <li>Third-party website or social media cookies: Third-party cookies are those that have been configured by a third party, external to us, for purposes such as collecting information about user behaviour, demographic data, or personalising advertising content. By using our Website, you may find embedded content, such as videos or links to third-party environments that have their own cookies, such as social networks (Instagram, Twitter, LinkedIn, Facebook, etc.), or payment gateways, over which we have no control.</li> </ul> COOKIE ORIGIN NAME DATA CATEGORIES RECIPIENTS PURPOSES DURATION Third-party (Stripe) Stripe session ID Stripe Security and fraud prevention in payments.. Session Third-party (Stripe) Stripe user ID Stripe Customer identification for recurring payments and user experience. Persistent (e.g., 1 year)"},{"location":"cookies-policy/#how-can-you-change-cookie-settings-and-reject-or-disable-cookies","title":"How can you change cookie settings and reject or disable cookies?","text":"<p>You can configure your consent for the use or non-use of certain cookies by clicking here, or through the pop-up that appears at the bottom, as soon as you access epanetjs.com or masteringwater.com.</p> <p>In addition, you can find how to manage cookies in the most common browsers at the links shown below:</p> <ul> <li>Microsoft Edge</li> <li>Google Chrome</li> <li>Google Android</li> <li>Internet Explorer</li> <li>Mozilla Firefox</li> <li>Opera</li> <li>Safari</li> <li>Safari (iOS)</li> </ul> <p>To find information related to other browsers, please visit the developer's website for that browser.</p>"},{"location":"privacy-policy/","title":"Privacy policy","text":"<p>Last updated: Oct 5, 2025</p>"},{"location":"privacy-policy/#introduction","title":"INTRODUCTION","text":"<p>Iterating Inc. is the owner of the domain names \u201cepanetjs.com\u201d, \u201cmasteringwater.com\u201d, and \u201citerating.ca\u201d, as well as the applications and associated educational content it makes available to its Users (hereinafter, the \u201cWebsites and Services\u201d) for the purpose of offering its products, services, and educational content.</p> <p>This Privacy Policy forms an integral part of the Terms and Conditions of use of our Websites and Services and will apply to the processing of personal data of the Users of our Websites and services, including both data provided directly by Users and data that may be collected automatically or provided by third parties during the provision of any service and/or in the development of a contractual relationship with us.</p> <p>Your privacy matters to us, and we are committed to protecting your information in Canada, the European Union, and any other jurisdiction where we operate. Our Privacy Policy describes how Iterating Inc. collects such data, complying with the provisions of Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016 on the protection of natural persons with regard to the processing of personal data and on the free movement of such data (GDPR), as well as in compliance with any other applicable data protection regulations, ensuring a high standard of protection for all our users globally.</p> <p>Access, use, and maintenance of our Websites and Services imply the processing of personal information of its Users in accordance with the purposes contained and duly informed in this policy. Browse or using our Websites, as well as their services and functionalities, implies full and unreserved acceptance by the User of the content of this Privacy Policy and the Terms and Conditions.</p> <p>You should read our policy carefully to ensure you fully understand it. We recommend that you consult the Policy frequently for any updates or changes it may contain.</p> <p>In case you have any questions, you can contact us directly at the postal address and email provided in the section \u201cWHO IS RESPONSIBLE FOR THE PROCESSING OF YOUR DATA?\u201d. If you do not agree with our policies, please leave our Websites and do not use our services.</p>"},{"location":"privacy-policy/#who-is-responsible-for-the-processing-of-your-data","title":"WHO IS RESPONSIBLE FOR THE PROCESSING OF YOUR DATA?","text":"<p>Iterating Inc. (hereinafter, \u201cIterating\u201d), with its registered office at 2967 Dundas St W #536, Toronto, Ontario, M6P 1Z2, Canada, is the Data Controller of your personal data, which will be processed in accordance with the parameters set forth in this policy.</p> <p>All comments, queries, and requests regarding our use of your information should be addressed to the email address support@iterating.ca.</p>"},{"location":"privacy-policy/#what-are-the-details-of-the-processing-of-your-data","title":"WHAT ARE THE DETAILS OF THE PROCESSING OF YOUR DATA?","text":"<p>We collect and process the information that the User provides us or to which we have access during navigation on our Websites and through the use of the services provided through them, under the terms established in this Privacy Policy.</p> <p>Below, you will find more details about the processing of such data, classified by purpose:</p>"},{"location":"privacy-policy/#data-linked-to-the-user","title":"Data linked to the user:","text":""},{"location":"privacy-policy/#providing-access-and-user-account-management-loginregistration","title":"Providing access and user account management (Login/Registration):","text":"<ul> <li>Data processed: email, first name, and last name.</li> <li>Method of obtaining: Directly from the user when they complete the registration form directly from our Platform or when they do so through our links, integrated with third-party services such as Google or Microsoft, or by an email to which we send a code to log in (Clerk).</li> <li>Legal bases: Performance of a contract to which the data subject is party or in order to take steps at the request of the data subject prior to entering into a contract.</li> <li>Retention periods: The time necessary to fulfill the purpose for which the data were collected (as long as the user maintains their account active and is a user of our services), and to comply with our legal obligations, unless the user revokes consent, requests erasure, restricts processing, portability, or objects to processing, except for those that need to be retained for a longer period as required by law.</li> <li>Data communication: We delegate the storage and handling of user data to Clerk.</li> <li>International transfers: The company is located in Canada, which is a country recognized by the EU as an adequate and safe country for protection. When using Clerk, data may be transferred to jurisdictions outside the EU. We ensure that adequate data transfer mechanisms (such as EU Standard Contractual Clauses) are in place with our providers, thus guaranteeing data protection regardless of their location.</li> </ul>"},{"location":"privacy-policy/#provision-of-contracted-services-payments-and-subscriptions","title":"Provision of contracted services (Payments and Subscriptions):","text":"<ul> <li>Data processed: identifying data (first name and last name), contact data (email), payment data.</li> <li>Method of obtaining: Directly from the User.</li> <li>Legal bases: Performance of a contract to which the data subject is party or in order to take steps at the request of the data subject prior to entering into a contract.</li> <li>Retention period: The time necessary to fulfill the purpose for which the data were collected (as long as the user maintains their active subscription), and to comply with our legal obligations, unless the User revokes consent, requests erasure, restricts processing, portability, or objects to processing, except for those that need to be retained for a longer period as required by law.</li> <li>Data communication: We use Stripe for payments and subscriptions. The Stripe platform is an external payment platform. We do not manage or process credit card or bank account data, only those necessary to know if the user has paid the fee, which do not include the aforementioned data.</li> </ul>"},{"location":"privacy-policy/#sending-commercial-information-and-news-newsletter","title":"Sending commercial information and news (Newsletter):","text":"<ul> <li>Data processed: users' phone number, name, and email.</li> <li>Method of obtaining: Directly from the User when they provide their data through the forms enabled for subscription (KIT).</li> <li>Legal bases: Express consent of the data subject.</li> <li>Retention period: As long as the User is subscribed to this news service, unless they revoke their consent. After its termination, data will be kept for the legally foreseen periods.</li> <li>Data communication: We use KIT to send updates and notifications.</li> <li>International transfers: No data transfers to third countries are foreseen.</li> </ul>"},{"location":"privacy-policy/#communication-with-the-user-support-and-contact","title":"Communication with the user (Support and Contact):","text":"<ul> <li>Data processed: identifying data (first name and last name), contact data (email and phone number) and any other information the User wishes to provide verbally or in writing, as there are free text boxes in the different spaces, establishing a communication channel through which the User can include any type of personal data they deem appropriate in their message.</li> <li>Method of obtaining: Directly from the User when they complete contact forms or contact via email or through our support channels.</li> <li>Legal bases: Performance of a contract to which the data subject is party or for the application of contractual measures at their request (to manage their request or query).</li> <li>Retention period: As long as necessary to process and respond to the query. After its completion, data will be kept for the legally foreseen periods to comply with legal obligations.</li> <li>Data communication: Data may be communicated to third-party support or communication service providers if necessary to manage the query.</li> <li>International transfers: No data transfers to third countries are foreseen.</li> </ul>"},{"location":"privacy-policy/#data-not-directly-linked-to-the-user","title":"Data not directly linked to the user:","text":""},{"location":"privacy-policy/#websiteapplication-usage-and-functionality-analysis-posthog","title":"Website/Application usage and functionality analysis (PostHog):","text":"<ul> <li>Data processed: traffic and Browse data, user actions within the application.</li> <li>Method of obtaining: Through Browse and using the application.</li> <li>Legal bases: Legitimate interest (to improve the application and make better decisions about functionalities and improvements). If non-essential cookies are used, User consent will be required.</li> <li>Retention period: Defined according to PostHog configuration, no more than 18 months.</li> <li>Data communication: Data is processed by PostHog.</li> <li>International transfers: When using PostHog, data may be transferred to jurisdictions outside the EU. We ensure that adequate data transfer mechanisms (such as EU Standard Contractual Clauses) are in place with our providers. Options for cookieless tracking are explored to minimise privacy impact.</li> </ul>"},{"location":"privacy-policy/#communications","title":"COMMUNICATIONS","text":"<p>Iterating Inc. may share information about platform activity, as well as about users who interact on it, always previously anonymised, so that it cannot reasonably be used to identify you. For example, we may share raw data or aggregated user statistics to describe our business to partners, the public, or for third-party collaborators of Iterating to analyse such anonymised and fully disassociated information to detect problems, trends, and help us improve our services.</p>"},{"location":"privacy-policy/#how-do-we-protect-your-data","title":"HOW DO WE PROTECT YOUR DATA?","text":"<p>Iterating Inc. informs you that it has taken reasonable technical and organizational measures to prevent the loss, misuse, alteration, or unlawful disclosure of your data. Any third party, agent, or representative of Iterating Inc. who needs to access your information will also be required to implement reasonable technical and organizational measures for the protection of your information.</p> <p>However, our Websites may contain links to third-party websites. If you choose to click on these third-party links, you will be redirected to the website of such third parties. Please note that these websites are governed by their own policies, so we recommend that you review their terms and conditions, privacy policy, and cookie policy before using such services. We cannot be held responsible for the use and access to such third-party websites or for the information or content made available by such third-party sites. The presence of third-party links on our website does not indicate that the company endorses or recommends such third parties. Access to or use of these sites is solely at the user's own risk.</p>"},{"location":"privacy-policy/#what-are-your-rights-regarding-your-data","title":"WHAT ARE YOUR RIGHTS REGARDING YOUR DATA?","text":"<p>As a data subject, the User has the right to exercise the following rights, which we guarantee to all our users, regardless of their geographical location:</p> <ul> <li>Access to your data.</li> <li>Rectification of your data, because we also want to ensure that your information is accurate and up to date.</li> <li>Restriction of the processing of data concerning you.</li> <li>Objection to the processing of your data, when the legal basis for processing is our legitimate interest.</li> <li>Withdrawal of your consent for data processing (when consent was the legal basis).</li> <li>Portability of your data, when the legal basis for data processing was your consent or the performance of a contract.</li> <li>Not to be subject to automated individual decision-making.</li> </ul> <p>To exercise the aforementioned rights, data subjects must contact Iterating Inc. via the email address indicated at the beginning of this Policy (support@iterating.ca). For security reasons, we may additionally request a copy of an equivalent identification document for identity verification purposes, in accordance with the legally established minimum content.</p> <p>We will process your request as soon as possible, always within the margins and deadlines stipulated by the GDPR and the applicable current legislation at the time of such request, guaranteeing a response to all our users under the highest privacy standards.</p> <p>Furthermore, the User has the right to lodge a complaint with the competent data protection authority if they have doubts or are not satisfied with the exercise of their rights.</p>"},{"location":"terms-conditions/","title":"Terms and conditions","text":"<p>Last updated: Oct 5, 2025</p> <p>These Terms and Conditions (hereinafter, the \u201cTerms\u201d) govern the access to and use of the website (the \u201cWebsite\u201d) and the services offered through it (the \u201cService\u201d) of the Website URL https://epanetjs.com, regardless of the application, digital medium, platform, or device through which it may be accessed.</p>"},{"location":"terms-conditions/#1-about-us","title":"1. About us.","text":"<p>Information about us.</p> <p>In compliance with the information obligations derived from applicable legislation, users are informed that the owner of this website is:</p> <ul> <li>Owner: Iterating Inc.</li> <li>Registered address: 2967 Dundas St W #536, Toronto, Ontario, M6P 1Z2, Canada</li> <li>Contact email: support@iterating.ca</li> <li>Jurisdiction: Company incorporated under the laws of the Province of Ontario, Canada.</li> <li>Purpose of the website: Provision of technological services for the design and simulation of hydraulic networks using open-source software (epanet-js).</li> </ul>"},{"location":"terms-conditions/#2-acceptance","title":"2. Acceptance","text":"<p>When you accept the Terms.</p> <p>Accessing, using, and/or subscribing to the services available on this Website grants you the status of User.</p> <p>By accessing or using the Website or Service, you expressly agree to be bound by these Terms and any updates thereto.</p> <p>Use of the platform requires advanced knowledge of hydraulic network design and simulation. The User is solely responsible for interpreting the information provided and for the results of all designs and simulations performed.</p>"},{"location":"terms-conditions/#3-service-description","title":"3. Service description","text":"<p>What our tool offers you.</p> <p>epanet-js is a tool for the design and simulation of hydraulic networks. Our service is designed for efficiency and privacy, allowing users to:</p> <ul> <li>Draw networks visually: Easily add nodes, pipes, and reservoirs, with auto-joining and auto-elevation features to streamline your work.</li> <li>Build from GIS data: Take your existing geospatial data and automatically create an interconnected hydraulic model.</li> <li>Run simulations instantly: Get results from your models quickly and efficiently.</li> <li>Visualize clear results: Review pressures, flows, and velocities at a glance, presented with an intuitive color code.</li> <li>Work on satellite maps: Overlay your networks on real-world designs using background and satellite maps.</li> <li>Full compatibility with EPANET: Import and export .inp files directly, with no conversions needed.</li> <li>Cross-platform, no installation required: Access epanet-js from any modern browser on Mac, Linux, or Windows, with no installations or virtual machines.</li> </ul> <p>Our main focus is \u201clocal-first\u201d:</p> <ul> <li>No installation required.</li> <li>No account required for basic use.</li> <li>No mandatory cloud storage.</li> </ul> <p>By default, all your projects and simulations run and are stored locally on your computer, ensuring you total control, security, and privacy. Cloud storage is optional and is only activated if the User chooses to use it.</p>"},{"location":"terms-conditions/#4-platform-use","title":"4. Platform use","text":""},{"location":"terms-conditions/#41-when-you-need-a-subscription","title":"4.1. When you need a subscription.","text":"<p>When you need a paid license, and when you do not.</p>"},{"location":"terms-conditions/#1-free-use-personal-or-commercial","title":"1. Free use (personal or commercial).","text":"<p>You may use the platform free of charge for both personal and commercial purposes, with access to the core features designated for free accounts. Some advanced functionalities, such as high-resolution satellite imagery, require registration.</p> <p>Iterating Inc. reserves the right to request proof of eligibility for free use and may suspend or terminate accounts that fail to meet the stated requirements.</p> <p>Free accounts do not include direct support from Iterating Inc. Users are solely responsible for issues arising from their own data or model inputs. Assistance is available only through the community, where users must make their project data publicly accessible in order to receive help. Iterating Inc. does not guarantee the availability, accuracy, or timeliness of any support provided through community channels.</p>"},{"location":"terms-conditions/#2-professional-or-team-subscription","title":"2. Professional or Team subscription","text":"<p>A paid Professional or Team subscription is required to access advanced features of the Platform, including but not limited to scenario management, private data sharing with Iterating Inc., and professional technical support related to model development and Platform usage. These subscriptions are designed for large-scale or complex projects and for users who require direct assistance from the epanet-js team.</p> <p>Iterating Inc. reserves the right to determine, in its sole discretion, whether a project or use case exceeds the scope of personal or educational eligibility and to require the upgrade to a Professional or Team subscription accordingly.</p>"},{"location":"terms-conditions/#3-personal-and-educational-accounts-accounts","title":"3. Personal and Educational Accounts Accounts","text":"<p>Personal and Educational Accounts are intended exclusively for non-commercial use. They are provided for experimentation, academic learning, research, and for exploring the functionality of the Platform\u2019s advanced features. These accounts grant access to most Platform features, but do not include paid professional support.</p> <p>These accounts may be used to test the capabilities of the service but must not be used for profit-generating or business-related projects.</p> <p>Eligibility for a Personal Account is limited to individuals using the Platform for personal experimentation or research. Eligibility for an Educational Account is restricted to students, faculty, and staff of accredited educational institutions, and registration with an institutional email address may be required. Iterating Inc. may request proof of eligibility at any time and reserves the right to suspend or terminate accounts that fail to meet these requirements.</p> <p>If at any point a user intends to use the Platform for commercial or large-scale professional purposes, including but not limited to projects on behalf of a for-profit organization, the user must upgrade to a Professional or Team subscription.</p> <p>Users of Personal and Educational Accounts are not entitled to direct technical support from Iterating Inc. and may only seek assistance through the public community forum. To obtain help in this way, users must make their project data publicly accessible, as private project support is not available under these accounts. Iterating Inc. does not guarantee any response or resolution through community channels, which are provided on a voluntary and best-effort basis.</p>"},{"location":"terms-conditions/#42-prohibitions-on-use-of-the-platform","title":"4.2 Prohibitions on use of the platform.","text":"<p>What you may not do with our platform</p> <p>By using our platform, you agree to the following:</p> <ul> <li>Do not use the Web Site or its content in any way that infringes the rights of third parties or violates applicable laws.</li> <li>Do not use trademarks, logos, text, or graphic elements from the Web Site for commercial purposes without the express authorization of Iterating Inc.</li> <li>Use the tools offered on the Website fairly and in accordance with the licenses granted for their use.</li> <li>If you have a subscription, use the account only for yourself and your organization, without exceeding the permitted scope of use or allowing third parties to access your account without prior written authorization from Iterating Inc. Iterating Inc. shall not be liable for any unauthorized access to or use of your account.</li> <li>The User shall not perform web scraping, data mining, or use the Website for training artificial intelligence models without prior written consent from Iterating Inc.</li> <li>You are responsible for maintaining the security of your account and password. Iterating Inc. cannot and will not be liable for any loss or damage resulting from your failure to comply with this security obligation.</li> <li>You are responsible for all content posted and activity that occurs under your account, even if the content is posted by others who have their own logins under your account.</li> <li>You may not use the Service for any unlawful purpose or to violate any laws in your jurisdiction, including but not limited to copyright laws.</li> <li>You must provide your legal full name, a valid email address, and any other information requested to complete the signup process.</li> <li>Your login may only be used by one person; sharing a single login across multiple individuals is prohibited. Separate logins may be created for additional users as needed.</li> <li>You must be a human. Accounts registered by \u201cbots\u201d or other automated methods are not permitted.</li> <li>You are responsible for interpreting the information provided and for the results of all designs and simulations performed.</li> <li>You are responsible for following the community's codes of conduct.</li> </ul>"},{"location":"terms-conditions/#5-account-creation","title":"5. Account creation","text":"<p>Using the \"Free\" version of epanet-js does not require registration or the creation of a user account.</p> <p>You can access and start using the hydraulic modeling application directly from the Website without providing personal information.</p> <p>To access advanced features, such as professional support, cloud storage, or temporary restoration, a paid subscription to the plans offered on the Website is required.</p> <p>The purchase process will involve creating a user account linked to your subscription, allowing you to manage your plan and access exclusive features.</p>"},{"location":"terms-conditions/#6-price-and-payment-method","title":"6. Price and payment method","text":"<p>The services offered, and their prices, are available at the following link:</p> <p>https://epanetjs.com/#pricing</p> <p>All prices are exclusive of applicable taxes, which will be charged in accordance with the laws of the User\u2019s jurisdiction.</p> <p>In any case, Iterating Inc reserves the right to modify pricing as deemed appropriate at any time, so it is possible that the services offered may be updated according to changing needs.</p> <p>In such cases, Iterating Inc will notify subscribing Users of the price change 30 days in advance by email. If the User does not agree with the new price, they may choose to cancel their subscription.</p> <p>The payment method for subscription plans is by credit card. Iterating Inc uses Stripe for processing of payments.</p> <p>Companies with particular conditions might have other payment options available to them. In such cases, the particular conditions prevail over these terms and conditions.</p>"},{"location":"terms-conditions/#7-refund-policy","title":"7. Refund Policy","text":"<p>The User may cancel their subscription at any time from their account on the Website or by contacting us directly via email at support@iterating.ca</p> <p>Clear Refund Policy:</p> <ul> <li> <p>Right to a Full Refund (14 days): If you cancel your subscription within the first 14 calendar days from the date of your initial payment, you will be entitled to a full refund. To request it, simply cancel your subscription or contact us.</p> </li> <li> <p>Later Cancellations: Once the initial 14-day period has passed, no partial or prorated refunds will be offered for the remaining subscription time.</p> </li> <li> <p>Automatic Renewal: To prevent interruption or loss of service, any Subscription will automatically renew at the end of each Subscription Term unless you cancel at least thirty (30) days prior to the expiration of that Subscription Term.</p> </li> </ul>"},{"location":"terms-conditions/#8-intellectual-property","title":"8. Intellectual property","text":"<p>epanet-js and all associated content, including but not limited to the user interface, graphic design, and text, are the property of Iterating Inc., unless expressly stated otherwise.</p> <p>Use of the services grants the User a limited, revocable, non-exclusive, and non-transferable license, in accordance with the terms of the respective license. This license allows the use of the software under its terms but does not transfer intellectual property rights to you.</p> <p>The underlying software of epanet-js is distributed under free and/or open-source software licenses, and its source code is publicly available on GitHub.</p>"},{"location":"terms-conditions/#9-limitation-of-liability","title":"9. Limitation of Liability","text":""},{"location":"terms-conditions/#91-software-provided-as-is","title":"9.1 Software provided \u201cAs-is\u201d","text":"<p>You are responsible for your use of the Platform. Iterating Inc does not provide any guarantees or warranties about the Platform or your use of it.</p> <p>EXCEPT AS EXPRESSLY PROVIDED OTHERWISE IN THESE TERMS, AND TO THE FULLEST EXTENT PERMITTED BY LAW, ITERATING INC PROVIDES THE PLATFORM, INCLUDING ALL OFFERINGS AND BETA OFFERINGS, \u201cAS-IS\u201d AND \u201cAS AVAILABLE\u201d, WITHOUT ANY EXPRESS OR IMPLIED WARRANTY OR INDEMNITY, AND ITERATING INC HAS NO LIABILITY RELATING TO YOUR USE OF THE PLATFORM. ITERATING INC DISCLAIMS ALL WARRANTIES OR GUARANTEES OF ANY KIND, EXPRESS OR IMPLIED, WHETHER ARISING UNDER ANY THEORY OF LAW OR FROM ANY USAGE IN TRADE OR OTHERWISE, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTIBILITY, NON-INFRINGEMENT, FITNESS OR A PARTICULAR PURPOSE OR OTHERWISE. ITERATING INC DISCLAIMS ALL WARRANTIES OR GUARANTEES ABOUT THE ACCURACY, RELIABILITY OR THAT THE PLATFORM WILL MEET YOUR REQUIREMENTS, BE SECURE, UNINTERRUPTED OR AVAILABLE AT ANY TIME OR LOCATION, ERROR-FREE, VIRUS-FREE, OR THAT ANY ERRORS WILL BE CORRECTED. YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE RESULTING FROM YOUR USE OF THE PLATFORM.</p>"},{"location":"terms-conditions/#92-limitation-of-liability","title":"9.2 Limitation of liability.","text":"<p>Caps how much Iterating Inc can be held responsible for damages.</p> <p>In no event will Iterating Inc be liable for indirect, incidental, exemplary, punitive, special or consequential damages; or lost profits, even where Iterating Inc knows or should have known of the likelihood of such damages. Iterating Inc maximum aggregate liability under these Terms will be the total fees paid by you in the twelve (12) months immediately prior to a claim. This limitation of liability applies whether the claims are in warranty, contract, tort (including negligence), infringement, or otherwise, even if Iterating Inc has been advised of the possibility of such damages. Nothing in these Terms limits or excludes any liability that cannot be limited or excluded under applicable law. Iterating Inc will not be held liable for any effects of an End Of Life of an Offering.</p>"},{"location":"terms-conditions/#10-data-privacy","title":"10. Data Privacy","text":"<p>At Iterating Inc., privacy is a fundamental pillar of our design:</p> <p>epanet-js does not automatically store personal information or upload User data to the cloud, unless the User explicitly and voluntarily chooses to do so.</p> <p>By default, all files, projects, and simulations are run and saved locally on your device.</p> <p>We only collect minimal browsing data, such as technical cookies, that are strictly necessary for the operation of the Website and to improve the user experience.</p> <p>For more detailed information on how we collect, use, and protect your data, please refer to our Privacy Policy (Link).</p>"},{"location":"terms-conditions/#11-third-parties-links","title":"11. Third parties links","text":"<p>This Website may include links to external platforms or services (such as GitHub, Stripe, etc.) that are not owned or controlled by Iterating Inc. Iterating Inc. does not control and assumes no responsibility for the content, privacy practices, or policies of these third-party websites. We recommend reviewing the terms and privacy policies of any third-party website you visit.</p>"},{"location":"terms-conditions/#12-modifications-and-nullity","title":"12. Modifications and Nullity","text":"<p>Iterating Inc reserves the right to update and modify these legal texts at any time. Therefore, the User is advised to check and read them every time the Application and Website are accessed or used. We will notify you by email of any significant changes to the terms and conditions.</p> <p>If any clause of these Terms and Conditions, Privacy Policy, or Cookies Policy is declared totally or partially void or ineffective, such nullity or ineffectiveness will only affect that provision, with the other conditions remaining in force, and the affected provision being considered as not included.</p>"},{"location":"terms-conditions/#13-applicable-law-and-jurisdiction","title":"13. Applicable law and jurisdiction","text":"<p>These Terms and Conditions, as well as the Privacy Policy and the Cookies Policy, will be interpreted and governed in accordance with Canadian legislation.</p> <p>Whenever the User is not a consumer or User, and when there is no rule obliging otherwise, the parties agree to submit to the Courts and Tribunals of Ontario, as this is the place of the contract's celebration, with an express waiver of any other jurisdiction that may correspond to them.</p> <p>If the User is a consumer residing in the European Union, they may resort to the Online Dispute Resolution Platform - created by the European Union and developed by the European Commission under Regulation (EU) 524/2013 - if they have concerns with an online purchase made from Iterating Inc and wish to reach an extrajudicial agreement.</p>"},{"location":"terms-conditions/#14-contact","title":"14. Contact","text":"<p>In case of doubts, suggestions, or clarifications, the User can contact Iterating Inc through the following email address:</p> <p>Via postal:Iterating Inc. 2967 Dundas St W #536, Toronto, Ontario, M6P 1Z2, Canada</p> <p>Email: support@iterating.ca</p>"},{"location":"api/","title":"epanet-js toolkit","text":"<p>Do you want to create your own web based modelling applications, similar to epanet-js? You can with the epanet-js toolkit.</p> <p>Just want to use epanet-js? Launch the epanet-js app now!</p> <p></p>"},{"location":"api/#about-the-epanet-js-toolkit","title":"About the epanet-js toolkit","text":"<p>epanet-js toolkit is a javascript library for engineers, developers and academics to simulate water networks. The toolkit allows you to run and share hydraulic analyses, or create custom frontend and server-side applications using the OWA EPANET engine.</p> <p>The epanet-js toolkit is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit.</p> <p>The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications.</p> <p>The epanet-js toolkit allows you to simulate water distribution networks in javascript using the EPANET engine. If you're not familiar with either water modelling or EPANET, have a read through what is water modelling.</p> <p>Both the epanet-js toolkit is MIT licenced, which allows the library to be used in comerical applications. The hydraulic engine used within the epanet-js library is OWA-EPANET 2.2, which is also MIT licenced, with contributions by the following authors.</p> <p>The source code for the project is hosted on GitHub and external contributions are welcome! You can learn more about the development process, our roadmap and also visit the Github repo.</p> <p>To get started in using the epanet-js toolkit in your applications, follow the instruction below to install the library. To see complex applications built on top of epanet-js, check out the showcase. If you have a project which uses epanet-js and want to share it, please let us know!</p>"},{"location":"api/#install","title":"Install","text":"<p>To install the stable version with npm:</p> <pre><code>$ npm install epanet-js\n</code></pre> <p>or with yarn:</p> <pre><code>$ yarn add epanet-js\n</code></pre> <p>For those without a module bundler, the epanet-js package will soon be available on unpkg as a precompiled UMD build. This will allow you to drop a UMD build in a <code>&lt;script&gt;</code> tag on your page and access it on the window.epanetJs global variable.</p>"},{"location":"api/#usage","title":"Usage","text":""},{"location":"api/#load-and-run-an-existing-inp-file","title":"Load and run an existing inp File","text":"<p>Run this example on CodeSandbox</p> <pre><code>import { Project, Workspace } from \"epanet-js\";\nimport fs from \"fs\";\n\n// Read an existing inp file from the disk\nconst net1 = fs.readFileSync(\"net1.inp\");\n\n// Initialise a new Workspace and Project object\nconst ws = new Workspace();\nconst model = new Project(ws);\n\n// Write a copy of the inp file to the workspace\nws.writeFile(\"net1.inp\", net1);\n\n// Runs toolkit methods: EN_open, EN_solveH &amp; EN_close\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\nmodel.solveH();\nmodel.close();\n</code></pre> <p>See the complete list of examples in the examples page.</p>"},{"location":"api/project/","title":"Project Class","text":"<p>Create a <code>Project</code> object by instancing the <code>epanetJs.Project</code> class with a <code>Workspace</code> object.</p> <pre><code>import { Workspace, Project } from `epanet-js`\nconst ws = new Workspace()\nconst model = new Project(ws)\n</code></pre>"},{"location":"api/project/#class-methods","title":"Class Methods","text":"Functions Description Project Functions These functions are used to manage a project Hydraulic Analysis Functions These functions are used to perform a hydraulic analysis Water Quality Analysis Functions These functions are used to perform a water quality analysis Reporting Functions These functions are used to report simulation results Analysis Options Functions These functions are used to get and set analysis options Network Node Functions These functions are used for working with network nodes Nodal Demand Functions These functions are used for managing nodal demands Network Link Functions These functions are used for working with network links Time Pattern Functions These functions are used for working with time patterns Data Curve Functions These functions are used for working with data curves Simple Control Functions These functions are used for working with simple conditional controls Rule-Based Control Functions These functions are used for working with rule-based controls"},{"location":"api/project/#project-functions","title":"Project Functions","text":"<p>These functions are used to manage a project More...</p> Function Description <code>open</code> Opens an EPANET input file &amp; reads in network data. <code>close</code> Closes a project and frees all of its memory. <code>runProject</code> Runs a complete EPANET simulation. <code>init</code> Initializes an EPANET project. <code>getCount</code> Retrieves the number of objects of a given type in a project. <code>getTitle</code> Retrieves the title lines of the project. <code>setTitle</code> Sets the title lines of the project. <code>saveInpFile</code> Saves a project's data to an EPANET-formatted text file."},{"location":"api/project/#hydraulic-analysis-functions","title":"Hydraulic Analysis Functions","text":"<p>These functions are used to perform a hydraulic analysis. More...</p> Function Description <code>solveH</code> Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. <code>useHydFile</code> Uses a previously saved binary hydraulics file to supply a project's hydraulics. <code>openH</code> Opens a project's hydraulic solver. <code>initH</code> Initializes a network prior to running a hydraulic analysis. <code>runH</code> Computes a hydraulic solution for the current point in time. <code>nextH</code> Determines the length of time until the next hydraulic event occurs in an extended period simulation. <code>saveH</code> Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. <code>saveHydFile</code> Saves a project's temporary hydraulics file to disk. <code>closeH</code> Closes the hydraulic solver freeing all of its allocated memory."},{"location":"api/project/#water-quality-analysis-functions","title":"Water Quality Analysis Functions","text":"<p>These functions are used to perform a water quality analysis. More...</p> Function Description <code>solveQ</code> Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. <code>openQ</code> Opens a project's water quality solver. <code>initQ</code> Initializes a network prior to running a water quality analysis. <code>runQ</code> Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. <code>nextQ</code> Advances a water quality simulation over the time until the next hydraulic event. <code>stepQ</code> Advances a water quality simulation by a single water quality time step. <code>closeQ</code> Closes the water quality solver, freeing all of its allocated memory."},{"location":"api/project/#reporting-functions","title":"Reporting Functions","text":"<p>These functions are used to report simulation results. More...</p> Function Description <code>writeLine</code> Writes a line of text to a project's report file. <code>report</code> Writes simulation results in a tabular format to a project's report file. <code>copyReport</code> Copies the current contents of a project's report file to another file. <code>clearReport</code> Clears the contents of a project's report file. <code>resetReport</code> Resets a project's report options to their default values. <code>setReport</code> Processes a reporting format command. <code>setStatusReport</code> Sets the level of hydraulic status reporting. <code>getStatistic</code> Retrieves a particular simulation statistic. <code>getResultIndex</code> Retrieves the order in which a node or link appears in an\u00a0output file."},{"location":"api/project/#analysis-options-functions","title":"Analysis Options Functions","text":"<p>These functions are used to get and set analysis options. More...</p> Function Description <code>getFlowUnits</code> Retrieves a project's flow units. <code>getOption</code> Retrieves the value of an analysis option. <code>getQualityInfo</code> Gets information about the type of water quality analysis requested. <code>getQualityType</code> Retrieves the type of water quality analysis to be run. <code>getTimeParameter</code> Retrieves the value of a time parameter. <code>setFlowUnits</code> Sets a project's flow units. <code>setOption</code> Sets the value for an anlysis option. <code>setQualityType</code> Sets the type of water quality analysis to run. <code>setTimeParameter</code> Sets the value of a time parameter."},{"location":"api/project/#network-node-functions","title":"Network Node Functions","text":"<p>These functions are used for working with network nodes. More...</p> Function Description <code>addNode</code> Adds a new node to a project. <code>deleteNode</code> Deletes a node from a project. <code>getNodeIndex</code> Gets the index of a node given its ID name. <code>getNodeId</code> Gets the ID name of a node given its index. <code>setNodeId</code> Changes the ID name of a node. <code>getNodeType</code> Retrieves a node's type given its index. <code>getNodeValue</code> Retrieves a property value for a node. <code>setNodeValue</code> Sets a property value for a node. <code>setJunctionData</code> Sets a group of properties for a junction node. <code>setTankData</code> Sets a group of properties for a tank node. <code>getCoordinates</code> Gets the (x,y) coordinates of a node. <code>setCoordinates</code> Sets the (x,y) coordinates of a node."},{"location":"api/project/#nodal-demand-functions","title":"Nodal Demand Functions","text":"<p>These functions are used for managing nodal demands. More...</p> Function Description <code>addDemand</code> appends a new demand to a junction node demands list. <code>deleteDemand</code> deletes a demand from a junction node. <code>getBaseDemand</code> Gets the base demand for one of a node's demand categories. <code>getDemandIndex</code> Retrieves the index of a node's named demand category. <code>getDemandModel</code> Retrieves the type of demand model in use and its parameters. <code>getDemandName</code> Retrieves the name of a node's demand category. <code>getDemandPattern</code> Retrieves the index of a time pattern assigned to one of a node's demand categories. <code>getNumberOfDemands</code> Retrieves the number of demand categories for a junction node. <code>setBaseDemand</code> Sets the base demand for one of a node's demand categories. <code>setDemandModel</code> Sets the type of demand model to use and its parameters. <code>setDemandName</code> Assigns a name to a node's demand category. <code>setDemandPattern</code> Sets the index of a time pattern used for one of a node's demand categories."},{"location":"api/project/#network-link-functions","title":"Network Link Functions","text":"<p>These functions are used for working with network links. More...</p> Function Description <code>addLink</code> Adds a new link to a project. <code>deleteLink</code> Deletes a link from the project. <code>getLinkIndex</code> Gets the index of a link given its ID name. <code>getLinkId</code> Gets the ID name of a link given its index. <code>setLinkId</code> Changes the ID name of a link. <code>getLinkType</code> Retrieves a link's type. <code>setLinkType</code> Changes a link's type. <code>getLinkNodes</code> Gets the indexes of a link's start- and end-nodes. <code>setLinkNodes</code> Sets the indexes of a link's start- and end-nodes. <code>getLinkValue</code> Retrieves a property value for a link. <code>setLinkValue</code> Sets a property value for a link. <code>setPipeData</code> Sets a group of properties for a pipe link. <code>getPumpType</code> Retrieves the type of head curve used by a pump. <code>getHeadCurveIndex</code> Retrieves the curve assigned to a pump's head curve. <code>setHeadCurveIndex</code> Assigns a curve to a pump's head curve. <code>getVertexCount</code> Retrieves the number of internal vertex points assigned to a link. <code>getVertex</code> Retrieves the coordinate's of a vertex point assigned to a link. <code>setVertices</code> Assigns a set of internal vertex points to a link."},{"location":"api/project/#time-pattern-functions","title":"Time Pattern Functions","text":"<p>These functions are used for working with time patterns. More...</p> Function Description <code>addPattern</code> Adds a new time pattern to a project. <code>deletePattern</code> Deletes a time pattern from a project. <code>getPatternIndex</code> Retrieves the index of a time pattern given its ID name. <code>getPatternId</code> Retrieves the ID name of a time pattern given its index. <code>setPatternId</code> Changes the ID name of a time pattern given its index. <code>getPatternLength</code> Retrieves the number of time periods in a time pattern. <code>getPatternValue</code> Retrieves a time pattern's factor for a given time period. <code>setPatternValue</code> Sets a time pattern's factor for a given time period. <code>getAveragePatternValue</code> Retrieves the average of all pattern factors in a time pattern. <code>setPattern</code> Sets the pattern factors for a given time pattern."},{"location":"api/project/#data-curve-functions","title":"Data Curve Functions","text":"<p>These functions are used for working with data curves. More...</p> Function Description <code>addCurve</code> Adds a new data curve to a project. <code>deleteCurve</code> Deletes a data curve from a project. <code>getCurveIndex</code> Retrieves the index of a curve given its ID name. <code>getCurveId</code> Retrieves the ID name of a curve given its index. <code>setCurveId</code> Changes the ID name of a data curve given its index. <code>getCurveLenth</code> Retrieves the number of points in a curve. <code>getCurveType</code> Retrieves a curve's type. <code>getCurveValue</code> Retrieves the value of a single data point for a curve. <code>setCurveValue</code> Sets the value of a single data point for a curve. <code>setCurve</code> assigns a set of data points to a curve."},{"location":"api/project/#simple-control-functions","title":"Simple Control Functions","text":"<p>These functions are used for working with simple conditional controls. More...</p> Function Description <code>addControl</code> Adds a new simple control to a project. <code>deleteControl</code> Deletes an existing simple control. <code>getControl</code> Retrieves the properties of a simple control. <code>setControl</code> Sets the properties of an existing simple control."},{"location":"api/project/#rule-based-control-functions","title":"Rule-Based Control Functions","text":"<p>These functions are used for working with rule-based controls.More...</p> Function Description <code>addRule</code> Adds a new rule-based control to a project. <code>deleteRule</code> Deletes an existing rule-based control. <code>getRule</code> Retrieves summary information about a rule-based control. <code>getRuleId</code> Gets the ID name of a rule-based control given its index. <code>getPremise</code> Gets the properties of a premise in a rule-based control. <code>setPremise</code> Sets the properties of a premise in a rule-based control. <code>setPremiseIndex</code> Sets the index of an object in a premise of a rule-based control. <code>setPremiseStatus</code> Sets the status being compared to in a premise of a rule-based control. <code>setPremiseValue</code> Sets the value in a premise of a rule-based control. <code>getThenAction</code> Gets the properties of a THEN action in a rule-based control. <code>setThenAction</code> Sets the properties of a THEN action in a rule-based control. <code>getElseAction</code> Gets the properties of an ELSE action in a rule-based control. <code>setElseAction</code> Sets the properties of an ELSE action in a rule-based control. <code>setRulePriority</code> Sets the priority of a rule-based control."},{"location":"api/toolkit/","title":"Overview","text":"<p>epanet-js contains two classes, Workspace &amp; Project. A Workspace represents a virtual file system where you can store and read files that are consumed by the tool kit, such as INP Files or generated by it, such as RPT files or OUT files.</p> <p>A Project is a single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods attached. A full list of all methods can be found on the wiki. All method names have been converted to camelCase to keep with javascript convention.</p> <p>Create a <code>Project</code> object by instancing the <code>Project</code> class with a <code>Workspace</code> object.</p> <pre><code>import { Project, Workspace } from `epanet-js`\n\nconst ws = new Workspace()\nconst model = new Project(ws)\n</code></pre> <p>If you are not familiar with the OWA-EPANET Toolkit API or EPANET it is worthwhile reading the OWA-EPANET Toolkit API documentation and OWA-EPANET wiki.</p> <p>** List of Classes **</p> Class Description Workspace A virtual file system where you can store and read files that are consumed by the tool kit Project A single instance of the EN_Project wrapper object and a singleton with all 122 toolkit methods"},{"location":"api/workspace/","title":"Workspace Class","text":""},{"location":"api/workspace/#class-workspace","title":"Class <code>Workspace</code>","text":"<p>Create a <code>Workspace</code> object by instancing the <code>epanetJs.Workspace</code> class.</p> <pre><code>import { Workspace } from `epanet-js`\nconst ws = new Workspace()\n</code></pre>"},{"location":"api/workspace/#class-methods","title":"Class Methods","text":"<pre><code>writeFile(path: string, data: string | ArrayBufferView)\n\nreadFile(file: string): string;\nreadFile(file: string, encoding: 'utf8'): string;\nreadFile(file: string, encoding: 'binary'): Uint8Array;\n</code></pre>"},{"location":"api/introduction/development/","title":"Library Development","text":""},{"location":"api/introduction/development/#roadmap","title":"Roadmap","text":"<p>Reaching version 1.0.0 is the current focus, the first non-beta version will have API stability and have mirrored functions of each method in the EPANET Toolkit.</p> <p>Also planned are helper classes and an object-oriented wrapper to allow simpler development of applications using the EPANET engine.</p>"},{"location":"api/introduction/development/#build","title":"Build","text":"<p>epanet-js is split into two packages, the epanet-engine package which wraps the original C code in C++ and compiles it to JavaScript using Emscripten. And epanet-js is a TypeScript library which wraps over the generated module from Emscripten and manages memory allocation, error handling and returning of varaible.</p> <p>Building epanet-engine</p> <p>The first command <code>yarn run build:dockerimage</code> creates a docker container of Emscripten and the compiled OWA-EPANET source code, you can then run <code>yarn run build</code> to compile the C++ wrapper into Javascript.</p> <pre><code>cd packages/epanet-engine\nyarn run build:dockerimage\nyarn run build\n</code></pre> <p>Building epanet-js</p> <p>You must first build epanet-engine before you can lint, test or build epanet-js.</p> <pre><code>cd packages/epanet-js\nyarn run lint\nyarn run test\nyarn run build\n</code></pre>"},{"location":"api/introduction/examples/","title":"Examples","text":""},{"location":"api/introduction/examples/#step-through-the-hydraulic-simulation","title":"Step through the hydraulic simulation","text":"<p>Use the openH - initH - runH - nextH - closeH series of functions to step through the simulation one hydraulic time step at a time.</p> <p>Run this example on CodeSandbox</p> <pre><code>const { Project, Workspace } = require(\"epanet-js\");\nvar fs = require(\"fs\");\n\nconst net1 = fs.readFileSync(\"net1.inp\");\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nws.writeFile(\"net1.inp\", net1);\n\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\n\nconst n11Index = model.getNodeIndex(\"11\");\n\nmodel.openH();\nmodel.initH(11);\n\nlet tStep = Infinity;\ndo {\n  const cTime = model.runH();\n  const pressure = model.getNodeValue(n11Index, 11);\n  console.log(\n    `Current Time: - ${cTime}, Node 11 Pressure: ${pressure.toFixed(2)}`\n  );\n\n  tStep = model.nextH();\n} while (tStep &gt; 0);\n\nmodel.saveH();\nmodel.closeH();\n</code></pre>"},{"location":"api/introduction/examples/#new-model-builder-api","title":"New model builder API","text":"<p>Allows networks to be built completely from function calls instead of from an input file.</p> <pre><code>import { Project, Workspace } from \"epanet-js\";\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nmodel.init(\"report.rpt\", \"out.bin\", 0, 0);\n\nconst n1Index = model.addNode(\"N1\", NodeType.Junction);\nconst n2Index = model.addNode(\"N2\", NodeType.Junction);\nmodel.setJunctionData(n1Index, 700, 0, \"\");\nmodel.setJunctionData(n2Index, 400, 0, \"\");\n\nconst l1Index = model.addLink(\"L1\", LinkType.Pipe, \"N1\", \"N2\");\n</code></pre>"},{"location":"api/introduction/examples/#fire-flow-analysis-react-example","title":"Fire Flow Analysis - React Example","text":"<p>A more complex example that uses React.</p> <p>Select a node within a network, run an extended period simulation and conduct a fire flow test. Results displayed in a graph for pressure and the fire flow.</p> <p></p> <p>Run this example on CodeSandbox</p> <pre><code>import React, { useState } from \"react\";\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryTheme } from \"victory\";\nimport {\n  Project,\n  Workspace,\n  InitHydOption,\n  NodeProperty,\n  CountType,\n  NodeType,\n} from \"epanet-js\";\nvar fs = require(\"fs\");\n\nconst net1 = fs.readFileSync(\"net1.inp\");\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nws.writeFile(\"net1.inp\", net1);\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\n\nfunction getNodes() {\n  const nodeCount = model.getCount(CountType.NodeCount);\n  let nodeIds = [];\n  for (let i = 1; i &lt; nodeCount; i++) {\n    if (model.getNodeType(i) === NodeType.Junction) {\n      const nodeId = model.getNodeId(i);\n      nodeIds.push(nodeId);\n    }\n  }\n  return nodeIds;\n}\n\nfunction runSim(nodeId) {\n  const fireFlowNodeIndex = model.getNodeIndex(nodeId);\n  const flows = [100, 250, 500, 750, 1000];\n\n  model.openH();\n  model.initH(InitHydOption.NoSave);\n\n  let tStep = Infinity;\n  let flowAndPressure = [];\n  let fireResults = [];\n  do {\n    const cTime = model.runH();\n    const pressure = model.getNodeValue(\n      fireFlowNodeIndex,\n      NodeProperty.Pressure\n    );\n\n    flowAndPressure.push({ x: cTime / 60 / 60, y: pressure });\n    if (cTime === 46800) {\n      fireResults = fireFlowAnalysis(model, fireFlowNodeIndex, flows, pressure);\n      model.runH(); // Rerun original snapshot\n    }\n\n    tStep = model.nextH();\n  } while (tStep &gt; 0);\n\n  model.closeH();\n\n  return {\n    flowAndPressure,\n    fireResults,\n  };\n}\n\nfunction fireFlowAnalysis(model, index, flows, zeroPressure) {\n  const acc = [{ x: 0, y: zeroPressure }];\n\n  const orgBaseFlow = model.getNodeValue(index, NodeProperty.BaseDemand);\n\n  const pressures = flows.reduce((acc, flow) =&gt; {\n    model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow + flow);\n    model.runH();\n    const pressure = model.getNodeValue(index, NodeProperty.Pressure);\n    return acc.concat([{ x: flow, y: pressure }]);\n  }, acc);\n\n  model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow);\n  return pressures;\n}\n\nfunction SmallChart(props) {\n  return (\n    &lt;VictoryChart theme={VictoryTheme.material} height={175}&gt;\n      &lt;VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 },\n        }}\n        label={props.xLabel}\n      /&gt;\n      &lt;VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 },\n        }}\n        dependentAxis\n        label={props.yLabel}\n      /&gt;\n      &lt;VictoryLine data={props.data} /&gt;\n    &lt;/VictoryChart&gt;\n  );\n}\n\nexport default function App() {\n  const [nodeId, setNodeId] = useState(\"11\");\n\n  function handleSelectChange(e) {\n    setNodeId(e.target.value);\n  }\n\n  const nodeIds = getNodes();\n  const { flowAndPressure, fireResults } = runSim(nodeId);\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;epanet-js React Fire Flow Example&lt;/h1&gt;\n      &lt;h2&gt;Select a node to test&lt;/h2&gt;\n      &lt;select value={nodeId} onChange={handleSelectChange}&gt;\n        {nodeIds.map((n, i) =&gt; {\n          return (\n            &lt;option key={i} value={n}&gt;\n              {n}\n            &lt;/option&gt;\n          );\n        })}\n      &lt;/select&gt;\n      &lt;h3&gt;Fireflow at Node {nodeId}&lt;/h3&gt;\n      &lt;SmallChart\n        data={fireResults}\n        xLabel=\"Flow (GPM)\"\n        yLabel=\"Pressure (psi)\"\n      /&gt;\n\n      &lt;h3&gt;Pressure at Node {nodeId}&lt;/h3&gt;\n      &lt;SmallChart\n        data={flowAndPressure}\n        xLabel=\"Time (hours)\"\n        yLabel=\"Pressure (psi)\"\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"api/introduction/showcase/","title":"Showcase","text":"<p>The following apps were created using the epanet-js engine, please let us know any apps you've made.</p>"},{"location":"api/introduction/showcase/#model-view","title":"Model View","text":"<p>Display models created in EPANET directly in the browser. No data leaves your computer; all data rendered and processed locally using the epanet-js library.</p> <p>Website: Model View</p> <p>Source Code: GitHub</p>"},{"location":"api/introduction/showcase/#model-calibrate","title":"Model Calibrate","text":"<p>Extract subsections of your InfoWorks WS Pro models and run them in your browser. As you make calibration changes such as modifying roughness or restriction valves the application runs an epanet model and compares the simulated results to those observered in the field.</p> <p>Website: Model Calibrate</p>"},{"location":"api/introduction/water-modelling/","title":"Water Modelling","text":""},{"location":"api/introduction/water-modelling/#what-is-a-hydraulic-model","title":"What is a hydraulic model","text":"<p>Engineers use hydraulic modelling software to simulate water networks. A model will represent a network consisting of pipes, pumps, valves and storage tanks. The modelling software tracks the flow of water in each pipe, the pressure at each node, the height of water in each tank throughout the network during a multi-period simulation.</p>"},{"location":"api/introduction/water-modelling/#epanet","title":"EPANET","text":""},{"location":"api/introduction/water-modelling/#history-of-the-software","title":"History of the software","text":"<p>EPANET is an industry-standard program, initially developed by the USEPA, to simulate water distribution networks, its source code was released in the public domain. An open-source fork by the Open Water Analytics (OWA) community has been released extending its original capabilities. Read more about EPANET on Wikipedia and the OWA community on their website.</p> <p>The EPANET Toolkit is an API written in C that allows developers to embed the EPANET's engine in their own applications. Ports of the toolkit exist in Python and Matlab; however, there are limited options to use the EPANET engine in JavaScript.</p>"},{"location":"api/introduction/water-modelling/#epanet-in-javascript","title":"EPANET in Javascript","text":"<p>Epanet-js is a full port of version 2.2 OWA-EPANET Toolkit in Typescript, providing access to all 122 functions within the toolkit.</p> <p>The JavaScript library is for engineers, developers and academics to run and share hydraulic analyses or create custom front end or server-side applications.</p>"},{"location":"api/introduction/examples/","title":"Examples","text":""},{"location":"api/introduction/examples/#step-through-the-hydraulic-simulation","title":"Step through the hydraulic simulation","text":"<p>Use the openH - initH - runH - nextH - closeH series of functions to step through the simulation one hydraulic time step at a time.</p> <p>Run this example on CodeSandbox</p> <pre><code>const { Project, Workspace } = require(\"epanet-js\");\nvar fs = require(\"fs\");\n\nconst net1 = fs.readFileSync(\"net1.inp\");\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nws.writeFile(\"net1.inp\", net1);\n\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\n\nconst n11Index = model.getNodeIndex(\"11\");\n\nmodel.openH();\nmodel.initH(11);\n\nlet tStep = Infinity;\ndo {\n  const cTime = model.runH();\n  const pressure = model.getNodeValue(n11Index, 11);\n  console.log(\n    `Current Time: - ${cTime}, Node 11 Pressure: ${pressure.toFixed(2)}`\n  );\n\n  tStep = model.nextH();\n} while (tStep &gt; 0);\n\nmodel.saveH();\nmodel.closeH();\n</code></pre>"},{"location":"api/introduction/examples/#new-model-builder-api","title":"New model builder API","text":"<p>Allows networks to be built completely from function calls instead of from an input file.</p> <pre><code>import { Project, Workspace } from \"epanet-js\";\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nmodel.init(\"report.rpt\", \"out.bin\", 0, 0);\n\nconst n1Index = model.addNode(\"N1\", NodeType.Junction);\nconst n2Index = model.addNode(\"N2\", NodeType.Junction);\nmodel.setJunctionData(n1Index, 700, 0, \"\");\nmodel.setJunctionData(n2Index, 400, 0, \"\");\n\nconst l1Index = model.addLink(\"L1\", LinkType.Pipe, \"N1\", \"N2\");\n</code></pre>"},{"location":"api/introduction/examples/#fire-flow-analysis-react-example","title":"Fire Flow Analysis - React Example","text":"<p>A more complex example that uses React.</p> <p>Select a node within a network, run an extended period simulation and conduct a fire flow test. Results displayed in a graph for pressure and the fire flow.</p> <p></p> <p>Run this example on CodeSandbox</p> <pre><code>import React, { useState } from \"react\";\nimport { VictoryChart, VictoryLine, VictoryAxis, VictoryTheme } from \"victory\";\nimport {\n  Project,\n  Workspace,\n  InitHydOption,\n  NodeProperty,\n  CountType,\n  NodeType,\n} from \"epanet-js\";\nvar fs = require(\"fs\");\n\nconst net1 = fs.readFileSync(\"net1.inp\");\n\nconst ws = new Workspace();\nconst model = new Project(ws);\n\nws.writeFile(\"net1.inp\", net1);\nmodel.open(\"net1.inp\", \"report.rpt\", \"out.bin\");\n\nfunction getNodes() {\n  const nodeCount = model.getCount(CountType.NodeCount);\n  let nodeIds = [];\n  for (let i = 1; i &lt; nodeCount; i++) {\n    if (model.getNodeType(i) === NodeType.Junction) {\n      const nodeId = model.getNodeId(i);\n      nodeIds.push(nodeId);\n    }\n  }\n  return nodeIds;\n}\n\nfunction runSim(nodeId) {\n  const fireFlowNodeIndex = model.getNodeIndex(nodeId);\n  const flows = [100, 250, 500, 750, 1000];\n\n  model.openH();\n  model.initH(InitHydOption.NoSave);\n\n  let tStep = Infinity;\n  let flowAndPressure = [];\n  let fireResults = [];\n  do {\n    const cTime = model.runH();\n    const pressure = model.getNodeValue(\n      fireFlowNodeIndex,\n      NodeProperty.Pressure\n    );\n\n    flowAndPressure.push({ x: cTime / 60 / 60, y: pressure });\n    if (cTime === 46800) {\n      fireResults = fireFlowAnalysis(model, fireFlowNodeIndex, flows, pressure);\n      model.runH(); // Rerun original snapshot\n    }\n\n    tStep = model.nextH();\n  } while (tStep &gt; 0);\n\n  model.closeH();\n\n  return {\n    flowAndPressure,\n    fireResults,\n  };\n}\n\nfunction fireFlowAnalysis(model, index, flows, zeroPressure) {\n  const acc = [{ x: 0, y: zeroPressure }];\n\n  const orgBaseFlow = model.getNodeValue(index, NodeProperty.BaseDemand);\n\n  const pressures = flows.reduce((acc, flow) =&gt; {\n    model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow + flow);\n    model.runH();\n    const pressure = model.getNodeValue(index, NodeProperty.Pressure);\n    return acc.concat([{ x: flow, y: pressure }]);\n  }, acc);\n\n  model.setNodeValue(index, NodeProperty.BaseDemand, orgBaseFlow);\n  return pressures;\n}\n\nfunction SmallChart(props) {\n  return (\n    &lt;VictoryChart theme={VictoryTheme.material} height={175}&gt;\n      &lt;VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 },\n        }}\n        label={props.xLabel}\n      /&gt;\n      &lt;VictoryAxis\n        style={{\n          axisLabel: { fontSize: 8, padding: 30 },\n          tickLabels: { fontSize: 6, padding: 5 },\n        }}\n        dependentAxis\n        label={props.yLabel}\n      /&gt;\n      &lt;VictoryLine data={props.data} /&gt;\n    &lt;/VictoryChart&gt;\n  );\n}\n\nexport default function App() {\n  const [nodeId, setNodeId] = useState(\"11\");\n\n  function handleSelectChange(e) {\n    setNodeId(e.target.value);\n  }\n\n  const nodeIds = getNodes();\n  const { flowAndPressure, fireResults } = runSim(nodeId);\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;epanet-js React Fire Flow Example&lt;/h1&gt;\n      &lt;h2&gt;Select a node to test&lt;/h2&gt;\n      &lt;select value={nodeId} onChange={handleSelectChange}&gt;\n        {nodeIds.map((n, i) =&gt; {\n          return (\n            &lt;option key={i} value={n}&gt;\n              {n}\n            &lt;/option&gt;\n          );\n        })}\n      &lt;/select&gt;\n      &lt;h3&gt;Fireflow at Node {nodeId}&lt;/h3&gt;\n      &lt;SmallChart\n        data={fireResults}\n        xLabel=\"Flow (GPM)\"\n        yLabel=\"Pressure (psi)\"\n      /&gt;\n\n      &lt;h3&gt;Pressure at Node {nodeId}&lt;/h3&gt;\n      &lt;SmallChart\n        data={flowAndPressure}\n        xLabel=\"Time (hours)\"\n        yLabel=\"Pressure (psi)\"\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"api/introduction/examples/vite/","title":"React + Vite + TypeScript","text":"<p>Below is a step-by-step tutorial to help you get started with epanet-js in a new React + Vite + TypeScript application. By the end, you\u2019ll have a small web app that lets you:</p> <ul> <li>Load an EPANET <code>.inp</code> file from your computer.</li> <li>Run a hydraulic simulation in the browser using epanet-js.</li> <li>Display the generated report in a read-only text area.</li> </ul> <p>This tutorial assumes:</p> <ul> <li>You have some familiarity with React and TypeScript.</li> <li>You know basic npm commands, and have Node.js and npm installed.</li> </ul> <p>We\u2019ll build this incrementally in four steps, starting from a fresh React + Vite + TypeScript scaffold.</p>"},{"location":"api/introduction/examples/vite/#step-1-create-a-new-react-vite-typescript-app","title":"Step 1: Create a New React + Vite + TypeScript App","text":"<p>First, create and run your new Vite project with React and TypeScript:</p> <pre><code>npm create vite@latest my-first-epanet-js-app -- --template react-ts\ncd my-first-epanet-js-app\nnpm install epanet-js\nnpm run dev\n</code></pre> <p>Open http://localhost:5173 in your browser. You\u2019ll see the default Vite + React starter page.</p> <p>Open the project in your code editor:</p> <pre><code>code .\n</code></pre> <p>Replace <code>src/App.tsx</code> with a simple scaffold: We\u2019ll start with a very basic UI to verify our setup. Remove all existing code in <code>src/App.tsx</code> and replace it with this minimal code:</p> <pre><code>import React from \"react\";\n\nfunction App() {\n  return (\n    &lt;div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}&gt;\n      &lt;h1&gt;EPANET-js React Example&lt;/h1&gt;\n      &lt;p&gt;This is the start of our EPANET-js app.&lt;/p&gt;\n      &lt;p&gt;\n        In later steps, we\u2019ll load an INP file, run a simulation, and show the\n        report here.\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Check your app: Go back to the browser and ensure it\u2019s still running on http://localhost:5173. You should see the new heading and text. That\u2019s it for step one! We have our scaffold in place.</p>"},{"location":"api/introduction/examples/vite/#step-2-handling-the-inp-file","title":"Step 2: Handling the INP File","text":"<p>Now, let\u2019s let users select an EPANET <code>.inp</code> file from their computer. When they pick a file, we\u2019ll read it and just show the file\u2019s text in a \"report\" area, proving we can handle file input.</p> <p>Update <code>src/App.tsx</code> to add file selection:</p> <pre><code>import React, { useState } from \"react\";\n\nfunction App() {\n  const [inpContent, setInpContent] = useState&lt;string&gt;(\"\");\n\n  function handleFileChange(event: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) =&gt; {\n      const text = e.target?.result as string;\n      setInpContent(text);\n    };\n    reader.readAsText(file);\n  }\n\n  return (\n    &lt;div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}&gt;\n      &lt;h1&gt;EPANET-js React Example&lt;/h1&gt;\n      &lt;p&gt;Select an INP file to display its content:&lt;/p&gt;\n\n      &lt;input\n        type=\"file\"\n        accept=\".inp\"\n        onChange={handleFileChange}\n        style={{ marginBottom: \"10px\" }}\n      /&gt;\n\n      &lt;h2&gt;File Content&lt;/h2&gt;\n      &lt;textarea\n        readOnly\n        value={inpContent}\n        style={{ width: \"100%\", height: \"300px\", marginTop: \"10px\" }}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Test it out:</p> <ol> <li>Save the file.</li> <li>Go to your browser and click \"Choose File.\"</li> <li>Select an <code>.inp</code> file from your computer.</li> <li>You should see the content of the <code>.inp</code> file displayed in the text area.</li> </ol> <p>Great! We can now load files from the user\u2019s computer.</p>"},{"location":"api/introduction/examples/vite/#step-3-running-the-hydraulic-simulation","title":"Step 3: Running the Hydraulic Simulation","text":"<p>Now we\u2019ll integrate epanet-js. We will:</p> <ul> <li>Run the hydraulic simulation steps in the browser (no server needed!).</li> <li>After finishing the simulation, we\u2019ll just display a success message.</li> </ul> <p>Before we finalize, let\u2019s explain the hydraulic simulation loop briefly:</p> <p>Hydraulic Simulation Overview:</p> <ol> <li>openH(): Open hydraulics.</li> <li>initH(): Initialize hydraulics.</li> <li>runH() + nextH() in a loop until no more hydraulic steps remain.</li> <li>closeH(): Close hydraulics.</li> </ol> <p>This simulates the hydraulic conditions of the network over time.</p> <p>Update <code>src/App.tsx</code> to run the simulation:</p> <pre><code>import React, { useState } from \"react\";\nimport { Project, Workspace, InitHydOption } from \"epanet-js\";\n\nfunction App() {\n  const [inpContent, setInpContent] = useState&lt;string&gt;(\"\");\n  const [statusMessage, setStatusMessage] = useState&lt;string&gt;(\"\");\n\n  function handleFileChange(event: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) =&gt; {\n      const text = e.target?.result as string;\n      setInpContent(text);\n      setStatusMessage(\"\");\n    };\n    reader.readAsText(file);\n  }\n\n  async function runModel(inpText: string) {\n    // Create a new workspace and project instance\n    const ws = new Workspace();\n    const model = new Project(ws);\n\n    // Write the inp file content into the in-memory file system\n    ws.writeFile(\"model.inp\", inpText);\n\n    // Now run the hydraulic simulation\n    model.open(\"model.inp\", \"report.rpt\", \"out.bin\");\n    model.openH();\n    model.initH(InitHydOption.SaveAndInit);\n\n    let tStep = Infinity;\n    do {\n      model.runH();\n      tStep = model.nextH();\n    } while (tStep &gt; 0);\n\n    model.closeH();\n    model.close();\n\n    // At this point, the simulation is complete\n    setStatusMessage(\"Simulation complete!\");\n  }\n\n  function handleRunClick() {\n    if (!inpContent) {\n      alert(\"Please load an INP file first.\");\n      return;\n    }\n    setStatusMessage(\"Running simulation...\");\n    runModel(inpContent);\n  }\n\n  return (\n    &lt;div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}&gt;\n      &lt;h1&gt;EPANET-js React Example&lt;/h1&gt;\n      &lt;p&gt;Select an INP file, then click \"Run Model\" to run the simulation.&lt;/p&gt;\n\n      &lt;input\n        type=\"file\"\n        accept=\".inp\"\n        onChange={handleFileChange}\n        style={{ marginBottom: \"10px\" }}\n      /&gt;\n\n      &lt;br /&gt;\n      &lt;button onClick={handleRunClick} disabled={!inpContent}&gt;\n        Run Model\n      &lt;/button&gt;\n\n      &lt;h2&gt;Status&lt;/h2&gt;\n      &lt;p&gt;{statusMessage}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Test it out:</p> <ol> <li>Select your <code>.inp</code> file.</li> <li>Click \"Run Model.\"</li> <li>You should see \"Running simulation...\" and then after a moment \"Simulation complete!\" (The complexity of the simulation depends on the network; for a small network, it should be almost instantaneous.)</li> </ol>"},{"location":"api/introduction/examples/vite/#step-4-displaying-the-generated-report","title":"Step 4: Displaying the Generated Report","text":"<p>Now we\u2019ll read the report file generated by the simulation. When we run the model, <code>epanet-js</code> writes <code>report.rpt</code> into the in-memory file system. We can read it and then display it in the text area.</p> <p>We\u2019ll replace the \"File Content\" text area with the actual \"Report\" after the simulation runs. Also, we\u2019ll add a <code>try/catch</code> block to handle errors gracefully. If something goes wrong, we\u2019ll close the model and show an error message.</p> <p>Update <code>src/App.tsx</code> again:</p> <pre><code>import React, { useState } from \"react\";\nimport { Project, Workspace, InitHydOption } from \"epanet-js\";\n\nfunction App() {\n  const [inpContent, setInpContent] = useState&lt;string&gt;(\"\");\n  const [report, setReport] = useState&lt;string&gt;(\"\");\n  const [statusMessage, setStatusMessage] = useState&lt;string&gt;(\"\");\n\n  function handleFileChange(event: React.ChangeEvent&lt;HTMLInputElement&gt;) {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    const reader = new FileReader();\n    reader.onload = (e) =&gt; {\n      const text = e.target?.result as string;\n      setInpContent(text);\n      setReport(\"\");\n      setStatusMessage(\"\");\n    };\n    reader.readAsText(file);\n  }\n\n  async function runModel(inpText: string) {\n    const ws = new Workspace();\n    const model = new Project(ws);\n\n    ws.writeFile(\"model.inp\", inpText);\n\n    try {\n      model.open(\"model.inp\", \"report.rpt\", \"out.bin\");\n      model.openH();\n      model.initH(InitHydOption.SaveAndInit);\n\n      let tStep = Infinity;\n      do {\n        model.runH();\n        tStep = model.nextH();\n      } while (tStep &gt; 0);\n\n      model.closeH();\n      model.close();\n\n      // Now read the report\n      const reportText = ws.readFile(\"report.rpt\", \"utf8\");\n      setReport(reportText);\n      setStatusMessage(\"Simulation complete! Report generated below.\");\n    } catch (error) {\n      console.error(\"Error running model:\", error);\n      model.close(); // Ensure we close if an error occurred\n      setStatusMessage(\"Error running model. See console for details.\");\n    }\n  }\n\n  function handleRunClick() {\n    if (!inpContent) {\n      alert(\"Please load an INP file first.\");\n      return;\n    }\n    setStatusMessage(\"Running simulation...\");\n    setReport(\"\");\n    runModel(inpContent);\n  }\n\n  return (\n    &lt;div style={{ padding: \"20px\", fontFamily: \"sans-serif\" }}&gt;\n      &lt;h1&gt;EPANET-js React Example&lt;/h1&gt;\n      &lt;p&gt;\n        Select an INP file, then click \"Run Model\" to run the simulation and\n        show the report.\n      &lt;/p&gt;\n\n      &lt;input\n        type=\"file\"\n        accept=\".inp\"\n        onChange={handleFileChange}\n        style={{ marginBottom: \"10px\" }}\n      /&gt;\n\n      &lt;br /&gt;\n      &lt;button onClick={handleRunClick} disabled={!inpContent}&gt;\n        Run Model\n      &lt;/button&gt;\n\n      &lt;h2&gt;Status&lt;/h2&gt;\n      &lt;p&gt;{statusMessage}&lt;/p&gt;\n\n      &lt;h2&gt;Report&lt;/h2&gt;\n      &lt;textarea\n        readOnly\n        value={report}\n        style={{ width: \"100%\", height: \"300px\", marginTop: \"10px\" }}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Test one last time:</p> <ol> <li>Load the <code>.inp</code> file.</li> <li>Click \"Run Model\".</li> <li>After a moment, you should see \"Simulation complete! Report generated below.\"</li> <li>The <code>textarea</code> now shows the generated EPANET report.</li> </ol> <p>If the simulation fails for any reason, the <code>catch</code> block will handle the error, ensure the model is closed, and display an error message.</p>"},{"location":"api/introduction/examples/vite/#wrap-up","title":"Wrap Up","text":"<p>You\u2019ve now:</p> <ol> <li>Created a React + Vite + TS project.</li> <li>Loaded an <code>.inp</code> file from your computer.</li> <li>Run an EPANET hydraulic simulation entirely in the browser using epanet-js.</li> <li>Displayed the resulting <code>report.rpt</code> file in a read-only text box.</li> <li>Added error handling to gracefully manage failures.</li> </ol> <p>This basic template should give you a solid starting point for building more complex EPANET-based applications in a web environment. From here, you can explore different EPANET APIs to get node pressures, tank levels, run water quality analyses, and more!</p> <p>Good luck with your EPANET-js journey!</p>"},{"location":"api/project-functions/analysis-options/","title":"Analysis Options Functions","text":"<p>These functions are used to get and set analysis options.</p> Function Description <code>getFlowUnits</code> Retrieves a project's flow units. <code>getOption</code> Retrieves the value of an analysis option. <code>getQualityInfo</code> Gets information about the type of water quality analysis requested. <code>getQualityType</code> Retrieves the type of water quality analysis to be run. <code>getTimeParameter</code> Retrieves the value of a time parameter. <code>setFlowUnits</code> Sets a project's flow units. <code>setOption</code> Sets the value for an anlysis option. <code>setQualityType</code> Sets the type of water quality analysis to run. <code>setTimeParameter</code> Sets the value of a time parameter."},{"location":"api/project-functions/analysis-options/#getflowunits","title":"getFlowUnits","text":"<p>Retrieves a project's flow units.</p> <pre><code>getFlowUnits(): FlowUnits;\n</code></pre> <p>Returns</p> <p><code>Number</code> a flow units code (see <code>FlowUnits</code>)</p> <p>Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed.</p>"},{"location":"api/project-functions/analysis-options/#getoption","title":"getOption","text":"<p>Retrieves the value of an analysis option.</p> <pre><code>getOption(option: Option): number;\n</code></pre> <p>Parameters</p> Parameter Type Description option <code>Option</code> a type of analysis option (see <code>Option</code>). <p>Returns</p> <p><code>Number</code> the current value of the option.</p>"},{"location":"api/project-functions/analysis-options/#getqualityinfo","title":"getQualityInfo","text":"<p>Gets information about the type of water quality analysis requested.</p> <pre><code>getQualityInfo(): {\nqualType: QualityType;\nchemName: string;\nchemUnits: string;\ntraceNode: number;\n};\n</code></pre> <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  qualType: QualityType;\n  chemName: string;\n  chemUnits: string;\n  traceNode: number;\n}\n</code></pre> Property Type Description qualType <code>QualityType</code> type of analysis to run (see <code>QualityType</code>). chemName <code>string</code> name of chemical constituent. chemUnits <code>string</code> concentration units of the constituent. traceNode <code>number</code> index of the node being traced (if applicable). <p>|</p>"},{"location":"api/project-functions/analysis-options/#getqualitytype","title":"getQualityType","text":"<p>Retrieves the type of water quality analysis to be run.</p> <pre><code>getQualityType(): {\nqualType: QualityType;\ntraceNode: number;\n};\n</code></pre> <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  qualType: QualityType;\n  traceNode: number;\n}\n</code></pre> Property Type Description qualType <code>QualityType</code> the type of analysis to run (see <code>QualityType</code>). traceNode <code>number</code> the index of node being traced, if qualType = <code>QualityType.Trace</code>."},{"location":"api/project-functions/analysis-options/#gettimeparameter","title":"getTimeParameter","text":"<p>Retrieves the value of a time parameter.</p> <pre><code>getTimeParameter(param: TimeParameter): number;\n</code></pre> <p>Parameters</p> Parameter Type Description param <code>TimeParameter</code> a time parameter code (see <code>TimeParameter</code>). <p>Returns</p> <p><code>Number</code> the current value of the time parameter (in seconds).</p>"},{"location":"api/project-functions/analysis-options/#setflowunits","title":"setFlowUnits","text":"<p>Sets a project's flow units.</p> <pre><code>setFlowUnits(units: FlowUnits): void;\n</code></pre> <p>Parameters</p> Parameter Type Description units <code>FlowUnits</code> a flow units code (see <code>FlowUnits</code>) <p>Flow units in liters or cubic meters implies that SI metric units are used for all other quantities in addition to flow. Otherwise US Customary units are employed.</p>"},{"location":"api/project-functions/analysis-options/#setoption","title":"setOption","text":"<p>Sets the value for an anlysis option.</p> <pre><code>setOption(option: Option, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description option <code>Option</code> a type of analysis option (see <code>Option</code>). value <code>number</code> the new value assigned to the option."},{"location":"api/project-functions/analysis-options/#setqualitytype","title":"setQualityType","text":"<p>Sets the type of water quality analysis to run.</p> <pre><code>setQualityType(qualType: QualityType, chemName: string, chemUnits: string, traceNode: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description qualType <code>QualityType</code> the type of analysis to run (see <code>QualityType</code>). chemName <code>string</code> the name of the quality constituent. chemUnits <code>string</code> the concentration units of the constituent. traceNode <code>string</code> the ID name of the node being traced if qualType = <code>QualityType.Trace</code>. <p>Chemical name and units can be an empty string if the analysis is not for a chemical. The same holds for the trace node if the analysis is not for source tracing.</p> <p>Note that the trace node is specified by ID name and not by index.</p>"},{"location":"api/project-functions/analysis-options/#settimeparameter","title":"setTimeParameter","text":"<p>Sets the value of a time parameter.</p> <pre><code>setTimeParameter(param: TimeParameter, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description param <code>TimeParameter</code> a time parameter code (see <code>TimeParameter</code>). value <code>number</code> the new value of the time parameter (in seconds)"},{"location":"api/project-functions/data-curve/","title":"Data Curve Functions","text":"<p>These functions are used for working with data curves.</p> Function Description <code>addCurve</code> Adds a new data curve to a project. <code>deleteCurve</code> Deletes a data curve from a project. <code>getCurveIndex</code> Retrieves the index of a curve given its ID name. <code>getCurveId</code> Retrieves the ID name of a curve given its index. <code>setCurveId</code> Changes the ID name of a data curve given its index. <code>getCurveLenth</code> Retrieves the number of points in a curve. <code>getCurveType</code> Retrieves a curve's type. <code>getCurveValue</code> Retrieves the value of a single data point for a curve. <code>setCurveValue</code> Sets the value of a single data point for a curve. <code>setCurve</code> assigns a set of data points to a curve."},{"location":"api/project-functions/data-curve/#addcurve","title":"addCurve","text":"<p>Adds a new data curve to a project.</p> <pre><code>addCurve(id: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> The ID name of the curve to be added. <p>The new curve contains a single data point (1.0, 1.0).</p>"},{"location":"api/project-functions/data-curve/#deletecurve","title":"deleteCurve","text":"<p>Deletes a data curve from a project.</p> <pre><code>deleteCurve(index: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the data curve's index (starting from 1)."},{"location":"api/project-functions/data-curve/#getcurveindex","title":"getCurveIndex","text":"<p>Retrieves the index of a curve given its ID name.</p> <pre><code>getCurveIndex(id: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> the ID name of a curve. <p>Returns</p> <p><code>Number</code> The curve's index (starting from 1).</p>"},{"location":"api/project-functions/data-curve/#getcurveid","title":"getCurveId","text":"<p>Retrieves the ID name of a curve given its index.</p> <pre><code>getCurveId(index: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a curve's index (starting from 1). <p>Returns</p> <p><code>Number</code> the curve's ID name.</p>"},{"location":"api/project-functions/data-curve/#setcurveid","title":"setCurveId","text":"<p>Changes the ID name of a data curve given its index.</p> <pre><code>setCurveId(index: number, id: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a data curve index (starting from 1). id <code>string</code> the data curve's new ID name."},{"location":"api/project-functions/data-curve/#getcurvelenth","title":"getCurveLenth","text":"<p>Retrieves the number of points in a curve.</p> <pre><code>getCurveLenth(index: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a curve's index (starting from 1). <p>Returns</p> <p><code>Number</code> The number of data points assigned to the curve.</p>"},{"location":"api/project-functions/data-curve/#getcurvetype","title":"getCurveType","text":"<p>Retrieves a curve's type.</p> <pre><code>getCurveType(index: number): CurveType;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a curve's index (starting from 1). <p>Returns</p> <p><code>CurveType</code> the curve's type (see <code>CurveType</code>).</p>"},{"location":"api/project-functions/data-curve/#getcurvevalue","title":"getCurveValue","text":"<p>Retrieves the value of a single data point for a curve.</p> <pre><code>getCurveValue(curveIndex: number, pointIndex: number): {\nx: number;\ny: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description curveIndex <code>number</code> a curve's index (starting from 1). pointIndex <code>number</code> the index of a point on the curve (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  x: number;\n  y: number;\n}\n</code></pre> Property Type Description x <code>number</code> the point's x-value. y <code>number</code> the point's y-value."},{"location":"api/project-functions/data-curve/#setcurvevalue","title":"setCurveValue","text":"<p>Sets the value of a single data point for a curve.</p> <pre><code>setCurveValue(curveIndex: number, pointIndex: number, x: number, y: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description curveIndex <code>number</code> a curve's index (starting from 1). pointIndex <code>number</code> the index of a point on the curve (starting from 1). x <code>number</code> the point's new x-value. y <code>number</code> the point's new y-value."},{"location":"api/project-functions/data-curve/#setcurve","title":"setCurve","text":"<p>Assigns a set of data points to a curve.</p> <pre><code>setCurve(index: number, xValues: number[], yValues: number[]): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code> </code> a curve's index (starting from 1). xValues <code>number[]</code> an array of new x-values for the curve. yValues <code>number[]</code> an array of new y-values for the curve. <p>Use this function to redefine (and resize) a curve all at once; use <code>setCurveValue</code> to revise a curve's data points one at a time.</p>"},{"location":"api/project-functions/enumerated-types/","title":"Enumerated Types","text":"Enumerations Description ActionCodeType Deletion action codes. AnalysisStatistic Analysis convergence statistics. ControlType Simple control types. CountType Types of objects to count. CurveType Types of data curves. DemandModel Demand models. FlowUnits Flow units. HeadLossType Head loss formulas. InitHydOption Hydraulic initialization options. LinkProperty Link properties. LinkStatusType Link status. LinkType Link types. MixingModel Tank mixing models. NodeProperty Node properties. NodeType Node Types. ObjectType Types of network objects. Option Simulation options. PumpStateType Pump states. PumpType Types of pump curves. QualityType Types of water quality analyses. RuleObject Network objects used in rule-based controls. RuleOperator Comparison operators used in rule-based controls. RuleStatus Link status codes used in rule-based controls. RuleVariable Object variables used in rule-based controls. SizeLimits Size Limts. SourceType Water quality source types. StatisticType Reporting statistic choices. StatusReport Status reporting levels. TimeParameter Time parameters."},{"location":"api/project-functions/enumerated-types/#actioncodetype","title":"ActionCodeType","text":"<p>Deletion action codes.</p> <p>These codes are used in <code>deleteNode</code> and <code>deleteLink</code> to indicate what action should be taken if the node or link being deleted appears in any simple or rule-based controls or if a deleted node has any links connected to it.</p> <p>Enumeration Members</p> Member Value Description Unconditional <code>0</code> Delete all controls and connecing links. Conditional <code>1</code> Cancel object deletion if it appears in controls or has connecting links."},{"location":"api/project-functions/enumerated-types/#analysisstatistic","title":"AnalysisStatistic","text":"<p>Analysis convergence statistics.</p> <p>These statistics report the convergence criteria for the most current hydraulic analysis and the cumulative water quality mass balance error at the current simulation time. They can be retrieved with <code>getStatistic</code>.</p> <p>Enumeration Members</p> Member Value Description DeficientNodes <code>5</code> Number of pressure deficient nodes. DemandReduction <code>6</code> % demand reduction at pressure deficient nodes Iterations <code>0</code> Number of hydraulic iterations taken. MassBalance <code>4</code> Cumulative water quality mass balance ratio. MaxFlowChange <code>3</code> Largest flow change in links. MaxHeadError <code>2</code> Largest head loss error for links. RelativeError <code>1</code> Sum of link flow changes / sum of link flows."},{"location":"api/project-functions/enumerated-types/#controltype","title":"ControlType","text":"<p>Simple control types.</p> <p>These are the different types of simple (single statement) controls that can be applied to network links. They are used as an argument to <code>addControl</code>, <code>getControl</code>, and <code>setControl</code>.</p> <p>Enumeration Members</p> Member Value Description HiLevel <code>1</code> Act when pressure or tank level rises above a setpoint. LowLevel <code>0</code> Act when pressure or tank level drops below a setpoint. TimeOfDay <code>3</code> Act at a particular time of day. Timer <code>2</code> Act at a prescribed elapsed amount of time."},{"location":"api/project-functions/enumerated-types/#counttype","title":"CountType","text":"<p>Types of objects to count.</p> <p>These options tell <code>getCount</code> which type of object to count.</p> <p>Enumeration Members</p> Member Value Description ControlCount <code>5</code> Number of simple controls. CurveCount <code>4</code> Number of data curves. LinkCount <code>2</code> Number of links (pipes + pumps + valves) NodeCount <code>0</code> Number of nodes (junctions + tanks + reservoirs) PatCount <code>3</code> Number of time patterns. RuleCount <code>6</code> Number of rule-based controls. TankCount <code>1</code> Number of tanks and reservoirs."},{"location":"api/project-functions/enumerated-types/#curvetype","title":"CurveType","text":"<p>Types of data curves.</p> <p>These are the different types of physical relationships that a data curve can represent as returned by calling <code>getCurveType</code>.</p> <p>Enumeration Members</p> Member Value Description EfficCurve <code>2</code> Pump efficiency v. flow curve. GenericCurve <code>4</code> Generic curve. HlossCurve <code>3</code> Valve head loss v. flow curve. PumpCurve <code>1</code> Pump head v. flow curve. VolumeCurve <code>0</code> Tank volume v. depth curve."},{"location":"api/project-functions/enumerated-types/#demandmodel","title":"DemandModel","text":"<p>Demand models.</p> <p>These choices for modeling consumer demands are used with <code>getDemandModel</code> and <code>setDemandModel</code>.</p> <p>A demand driven analysis requires that a junction's full demand be supplied in each time period independent of how much pressure is available. A pressure driven analysis makes demand be a power function of pressure, up to the point where the full demand is met.</p> <p>Enumeration Members</p> Member Value Description DDA <code>0</code> Demand driven analysis. PDA <code>1</code> Pressure driven analysis."},{"location":"api/project-functions/enumerated-types/#flowunits","title":"FlowUnits","text":"<p>Flow units.</p> <p>These choices for flow units are used with <code>getFlowUnits</code> and <code>setFlowUnits</code>. They are also used for the flow units type argument in <code>init</code>. If flow units are expressed in US Customary units ( <code>CFS</code>, <code>GPM</code>, <code>MGD</code>, <code>IMGD</code>, <code>AFD</code> ) then all other quantities are in US Customary units. Otherwise they are in metric units.</p> <p>Enumeration Members</p> Member Value Description AFD <code>4</code> Acre-feet per day. CFS <code>0</code> Cubic feet per second. CMD <code>9</code> Cubic meters per day. CMH <code>8</code> Cubic meters per hour. GPM <code>1</code> Gallons per minute. IMGD <code>3</code> Imperial million gallons per day. LPM <code>6</code> Liters per minute. LPS <code>5</code> Liters per second. MGD <code>2</code> Million gallons per day. MLD <code>7</code> Million liters per day."},{"location":"api/project-functions/enumerated-types/#headlosstype","title":"HeadLossType","text":"<p>Head loss formulas.</p> <p>The available choices for <code>Option.HeadlossForm</code> in <code>getOption</code> and <code>setOption</code>. They are also used for the head loss type argument in <code>init</code>. Each head loss formula uses a different type of roughness coefficient ( <code>LinkProperty.Roughness</code> ) that can be set with <code>setLinkValue</code>.</p> <p>Enumeration Members</p> Member Value Description CM <code>2</code> Chezy-Manning. DW <code>1</code> Darcy-Weisbach. HW <code>0</code> Hazen-Williams."},{"location":"api/project-functions/enumerated-types/#inithydoption","title":"InitHydOption","text":"<p>Hydraulic initialization options.</p> <p>These options are used to initialize a new hydraulic analysis when <code>initH</code> is called.</p> <p>Enumeration Members</p> Member Value Description InitFlow <code>10</code> Don't save hydraulics; re-initialize flows. NoSave <code>0</code> Don't save hydraulics; don't re-initialize flows. Save <code>1</code> Save hydraulics to file, don't re-initialize flows. SaveAndInit <code>11</code> Save hydraulics; re-initialize flows."},{"location":"api/project-functions/enumerated-types/#linkproperty","title":"LinkProperty","text":"<p>Link properties.</p> <p>These link properties are used with <code>getLinkValue</code> and <code>setLinkValue</code>. Those marked as read only are computed values that can only be retrieved.</p> <p>Enumeration Members</p> Member Value Description Diameter <code>0</code> Pipe/valve diameter. Energy <code>13</code> Current computed pump energy usage (read only) Flow <code>8</code> Current computed flow rate (read only) Headloss <code>10</code> Current computed head loss (read only) InitSetting <code>5</code> Initial pump speed or valve setting. InitStatus <code>4</code> Initial status (see <code>LinkStatusType</code>) KBulk <code>6</code> Bulk chemical reaction coefficient. KWall <code>7</code> Pipe wall chemical reaction coefficient. Length <code>1</code> Pipe length. LinkPattern <code>15</code> Pump speed time pattern index. LinkQual <code>14</code> Current computed link quality (read only) MinorLoss <code>3</code> Pipe/valve minor loss coefficient. PumpECost <code>21</code> Pump average energy price. PumpECurve <code>20</code> Pump efficiency v. flow curve index. PumpEffic <code>17</code> Current computed pump efficiency (read only) PumpEPat <code>22</code> Pump energy price time pattern index. PumpHCurve <code>19</code> Pump head v. flow curve index. PumpPower <code>18</code> Pump constant power rating. PumpState <code>16</code> Current computed pump state (read only) (see <code>PumpStateType</code>) Roughness <code>2</code> Pipe roughness coefficient. Setting <code>12</code> Current link setting. Status <code>11</code> Current link status (see <code>LinkStatusType</code>) Velocity <code>9</code> Current computed flow velocity (read only)"},{"location":"api/project-functions/enumerated-types/#linkstatustype","title":"LinkStatusType","text":"<p>Link status.</p> <p>One of these values is returned when <code>getLinkValue</code> is used to retrieve a link's initial status (<code>LinkProperty.InitStatus</code> ) or its current status ( <code>LinkProperty.Status</code> ). These options are also used with <code>setLinkValue</code> to set values for these same properties.</p> <p>Enumeration Members</p> Member Value Description Closed <code>0</code> Open <code>1</code>"},{"location":"api/project-functions/enumerated-types/#linktype","title":"LinkType","text":"<p>Link types.</p> <p>These are the different types of links that can be returned by calling <code>getLinkType</code>.</p> <p>Enumeration Members</p> Member Value Description CVPipe <code>0</code> Pipe with check valve. FCV <code>6</code> Flow control valve. GPV <code>8</code> General purpose valve. PBV <code>5</code> Pressure breaker valve. Pipe <code>1</code> Pipe. PRV <code>3</code> Pressure reducing valve. PSV <code>4</code> Pressure sustaining valve. Pump <code>2</code> Pump. TCV <code>7</code> Throttle control valve."},{"location":"api/project-functions/enumerated-types/#mixingmodel","title":"MixingModel","text":"<p>Tank mixing models.</p> <p>These are the different types of models that describe water quality mixing in storage tanks. The choice of model is accessed with <code>NodeProperty.MixModel</code> property of a Tank node using <code>getNodeValue</code> and <code>setNodeValue</code>.</p> <p>Enumeration Members</p> Member Value Description FIFO <code>2</code> First in, first out model. LIFO <code>3</code> Last in, first out model. Mix1 <code>0</code> Complete mix model. Mix2 <code>1</code> 2-compartment model"},{"location":"api/project-functions/enumerated-types/#nodeproperty","title":"NodeProperty","text":"<p>Node properties.</p> <p>These node properties are used with <code>getNodeValue</code> and <code>setNodeValue</code>. Those marked as read only are computed values that can only be retrieved.</p> <p>Enumeration Members</p> Member Value Description BaseDemand <code>1</code> Primary demand baseline value. CanOverFlow <code>26</code> Tank can overflow (= 1) or not (= 0) Demand <code>9</code> Current computed demand (read only) DemandDeficit <code>27</code> Amount that full demand is reduced under PDA (read only) Elevation <code>0</code> Elevation. Emitter <code>3</code> Emitter flow coefficient. Head <code>10</code> Current computed hydraulic head (read only) Initqual <code>4</code> Initial quality. InitVolume <code>14</code> Tank initial volume (read only) MaxLevel <code>21</code> Tank maximum level. MaxVolume <code>25</code> Tank maximum volume (read only) MinLevel <code>20</code> Tank minimum level. MinVolume <code>18</code> Tank minimum volume. MixFraction <code>22</code> Tank mixing fraction. MixModel <code>15</code> Tank mixing model (see <code>MixingModel</code>) MixZoneVol <code>16</code> Tank mixing zone volume (read only) Pattern <code>2</code> Primary demand time pattern index. Pressure <code>11</code> Current computed pressure (read only) Quality <code>12</code> Current computed quality (read only) SourceMass <code>13</code> Current computed quality source mass inflow (read only) SourcePat <code>6</code> Quality source pattern index. SourceQual <code>5</code> Quality source strength. SourceType <code>7</code> Quality source type (see <code>SourceType</code>) TankDiam <code>17</code> Tank diameter. TankKBulk <code>23</code> Tank bulk decay coefficient. TankLevel <code>8</code> Current computed tank water level (read only) TankVolume <code>24</code> Current computed tank volume (read only) VolCurve <code>19</code> Tank volume curve index."},{"location":"api/project-functions/enumerated-types/#nodetype","title":"NodeType","text":"<p>Node Types.</p> <p>These are the different types of nodes that can be returned by calling <code>getNodeType</code>.</p> <p>Enumeration Members</p> Member Value Description Junction <code>0</code> Junction node. Reservoir <code>1</code> Reservoir node. Tank <code>2</code> Storage tank node."},{"location":"api/project-functions/enumerated-types/#objecttype","title":"ObjectType","text":"<p>Types of network objects.</p> <p>The types of objects that comprise a network model.</p> <p>Enumeration Members</p> Member Value Description Control <code>4</code> Simple controls. Curve <code>3</code> Data curves. Link <code>1</code> Links. Node <code>0</code> Nodes. Rule <code>5</code> Control rules. TimePat <code>2</code> Time patterns."},{"location":"api/project-functions/enumerated-types/#option","title":"Option","text":"<p>Simulation options.</p> <p>These constants identify the hydraulic and water quality simulation options that are applied on a network-wide basis. They are accessed using the <code>getOption</code> and <code>setOption</code> functions.</p> <p>Enumeration Members</p> Member Value Description Accuracy <code>1</code> Total normalized flow change for hydraulic convergence. BulkOrder <code>19</code> Bulk water reaction order for pipes. CheckFreq <code>15</code> Frequency of hydraulic status checks. ConcenLimit <code>22</code> Limiting concentration for growth reactions. DampLimit <code>17</code> Accuracy level where solution damping begins. DemandCharge <code>11</code> Energy charge per max. KW usage. DemandMult <code>4</code> Global demand multiplier. Emitexpon <code>3</code> Exponent in emitter discharge formula. FlowChange <code>6</code> Maximum flow change for hydraulic convergence. GlobalEffic <code>8</code> Global pump efficiency (percent) GlobalPattern <code>10</code> Index of a global energy price pattern. GlobalPrice <code>9</code> Global energy price per KWH. HeadError <code>5</code> Maximum head loss error for hydraulic convergence. HeadlossForm <code>7</code> Head loss formula (see <code>HeadLossType</code>) MaxCheck <code>16</code> Maximum trials for status checking. SpDiffus <code>18</code> Specific diffusivity (relative to chlorine at 20 deg C) SpGravity <code>12</code> Specific gravity. SpViscos <code>13</code> Specific viscosity (relative to water at 20 deg C) TankOrder <code>21</code> Bulk water reaction order for tanks. Tolerance <code>2</code> Water quality tolerance. Trials <code>0</code> Maximum trials allowed for hydraulic convergence. Unbalanced <code>14</code> Extra trials allowed if hydraulics don't converge. WallOrder <code>20</code> Wall reaction order for pipes (either 0 or 1)"},{"location":"api/project-functions/enumerated-types/#pumpstatetype","title":"PumpStateType","text":"<p>Pump states.</p> <p>One of these codes is returned when <code>getLinkValue</code> is used to retrieve a pump's current operating state ( <code>LinkProperty.PumpState</code> ). <code>PumpXHead</code> indicates that the pump has been shut down because it is being asked to deliver more than its shutoff head. <code>PumpXFlow</code> indicates that the pump is being asked to deliver more than its maximum flow.</p> <p>Enumeration Members</p> Member Value Description PumpClosed <code>2</code> Pump closed. PumpOpen <code>3</code> Pump open. PumpXFlow <code>5</code> Pump open - cannot supply flow. PumpXHead <code>0</code> Pump closed - cannot supply head."},{"location":"api/project-functions/enumerated-types/#pumptype","title":"PumpType","text":"<p>Types of pump curves.</p> <p><code>getPumpType</code> returns one of these values when it is called.</p> <p>Enumeration Members</p> Member Value Description ConstHP <code>0</code> Constant horsepower. Custom <code>2</code> User-defined custom curve. NoCurve <code>3</code> No curve. PowerFunc <code>1</code> Power function."},{"location":"api/project-functions/enumerated-types/#qualitytype","title":"QualityType","text":"<p>Types of water quality analyses.</p> <p>These are the different types of water quality analyses that EPANET can run. They are used with <code>getQualityInfo</code>, <code>getQualityType</code>, and <code>setQualityType</code>.</p> <p>Enumeration Members</p> Member Value Description Age <code>2</code> Water age analysis. Chem <code>1</code> Chemical fate and transport. None <code>0</code> No quality analysis. Trace <code>3</code> Source tracing analysis."},{"location":"api/project-functions/enumerated-types/#ruleobject","title":"RuleObject","text":"<p>Network objects used in rule-based controls.</p> <p>Enumeration Members</p> Member Value Description Link <code>7</code> Clause refers to a link. Node <code>6</code> Clause refers to a node. System <code>8</code> Clause refers to a system parameter (e.g., time)"},{"location":"api/project-functions/enumerated-types/#ruleoperator","title":"RuleOperator","text":"<p>Comparison operators used in rule-based controls.</p> <p>Enumeration Members</p> Member Value Description Above <code>9</code> Is above. Below <code>8</code> Is below. EqualTo <code>0</code> Equal to. GreaterOrEqualTo <code>3</code> Greater than or equal to. GreaterThan <code>5</code> Greater than. Is <code>6</code> Is equal to. LessOrEqualTo <code>2</code> Less than or equal to. LessThan <code>4</code> Less than. Not <code>7</code> Is not equal to. NotEqualTo <code>1</code> Not equal."},{"location":"api/project-functions/enumerated-types/#rulestatus","title":"RuleStatus","text":"<p>Link status codes used in rule-based controls.</p> <p>Enumeration Members</p> Member Value Description IsActive <code>3</code> Control valve is active. IsClosed <code>2</code> Link is closed. IsOpen <code>1</code> Link is open."},{"location":"api/project-functions/enumerated-types/#rulevariable","title":"RuleVariable","text":"<p>Object variables used in rule-based controls.</p> <p>Enumeration Members</p> Member Value Description ClockTime <code>10</code> Time of day. Demand <code>0</code> Nodal demand. DrainTime <code>12</code> Time to drain a tank. FillTime <code>11</code> Time to fill a tank. Flow <code>5</code> Link flow rate. Grade <code>2</code> Nodal hydraulic grade. Head <code>1</code> Nodal hydraulic head. Level <code>3</code> Tank water level. Power <code>8</code> Pump power output. Pressure <code>4</code> Nodal pressure. Setting <code>7</code> Link setting. Status <code>6</code> Link status. Time <code>9</code> Elapsed simulation time."},{"location":"api/project-functions/enumerated-types/#sizelimits","title":"SizeLimits","text":"<p>Size Limts.</p> <p>Limits on the size of character arrays used to store ID names and text messages.</p> <p>Enumeration Members</p> Member Value Description MaxId <code>31</code> Max. # characters in ID name. MaxMsg <code>255</code> Max. # characters in message text."},{"location":"api/project-functions/enumerated-types/#sourcetype","title":"SourceType","text":"<p>Water quality source types.</p> <p>These are the different types of external water quality sources that can be assigned to a node's property ( see <code>NodeProperty.SourceType</code> ) and as used by <code>getNodeValue</code> and <code>setNodeValue</code>.</p> <p>Enumeration Members</p> Member Value Description Concen <code>0</code> Sets the concentration of external inflow entering a node. FlowPaced <code>3</code> Adds a given value to the concentration leaving a node. Mass <code>1</code> Injects a given mass/minute into a node. SetPoint <code>2</code> Sets the concentration leaving a node to a given value."},{"location":"api/project-functions/enumerated-types/#statistictype","title":"StatisticType","text":"<p>Reporting statistic choices.</p> <p>These options determine what kind of statistical post-processing should be done on the time series of simulation results generated before they are reported using <code>report</code>. An option can be chosen by using <code>Statistic</code> option as the argument to <code>setReport</code>.</p> <p>Enumeration Members</p> Member Value Description Average <code>1</code> Report average value over simulation period. Maximum <code>3</code> Report maximum value over simulation period. Minimum <code>2</code> Report minimum value over simulation period. Range <code>4</code> Report maximum - minimum over simulation period. Series <code>0</code> Report all time series points."},{"location":"api/project-functions/enumerated-types/#statusreport","title":"StatusReport","text":"<p>Status reporting levels.</p> <p>These choices specify the level of status reporting written to a project's report file during a hydraulic analysis. The level is set using the <code>setStatusReport</code> function.</p> <p>Enumeration Members</p> Member Value Description FullReport <code>2</code> Full level of status reporting. NoReport <code>0</code> No status reporting. NormalReport <code>1</code> Normal level of status reporting."},{"location":"api/project-functions/enumerated-types/#timeparameter","title":"TimeParameter","text":"<p>Time parameters.</p> <p>These time-related options are used with <code>getTimeParameter</code> and <code>setTimeParameter</code>. All times are expressed in seconds The parameters marked as read only are computed values that can only be retrieved.</p> <p>Enumeration Members</p> Member Value Description Duration <code>0</code> Total simulation duration. HaltFlag <code>13</code> Flag indicating if the simulation was halted (read only) HTime <code>11</code> Elapsed time of current hydraulic solution (read only) HydStep <code>1</code> Hydraulic time step. NextEvent <code>14</code> Shortest time until a tank becomes empty or full (read only) NextEventTank <code>15</code> Index of tank with shortest time to become empty or full (read only) PatternStart <code>4</code> Time when time patterns begin. PatternStep <code>3</code> Time pattern period. Periods <code>9</code> Number of reporting time periods (read only) QTime <code>12</code> Elapsed time of current quality solution (read only) QualStep <code>2</code> Water quality time step. ReportStart <code>6</code> Time when reporting starts. ReportStep <code>5</code> Reporting time step. RuleStep <code>7</code> Rule-based control evaluation time step. StartTime <code>10</code> Simulation starting time of day. Statistic <code>8</code> Reporting statistic code (see <code>StatisticType</code>)"},{"location":"api/project-functions/hydraulic-analysis/","title":"Hydraulic Analysis Functions","text":"<p>These functions are used to perform a hydraulic analysis.</p> Function Description <code>solveH</code> Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file. <code>useHydFile</code> Uses a previously saved binary hydraulics file to supply a project's hydraulics. <code>openH</code> Opens a project's hydraulic solver. <code>initH</code> Initializes a network prior to running a hydraulic analysis. <code>runH</code> Computes a hydraulic solution for the current point in time. <code>nextH</code> Determines the length of time until the next hydraulic event occurs in an extended period simulation. <code>saveH</code> Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals. <code>saveHydFile</code> Saves a project's temporary hydraulics file to disk. <code>closeH</code> Closes the hydraulic solver freeing all of its allocated memory."},{"location":"api/project-functions/hydraulic-analysis/#solveh","title":"solveH","text":"<p>Runs a complete hydraulic simulation with results for all time periods written to a temporary hydraulics file.</p> <pre><code>solveH(): void\n</code></pre> <p>Use <code>solveH</code> to generate a complete hydraulic solution which can stand alone or be used as input to a water quality analysis. This function will not allow one to examine intermediate hydraulic results as they are generated. It can also be followed by calls to <code>saveH</code> and <code>report</code> to write hydraulic results to the report file.</p> <p>The sequence <code>openH</code> - <code>initH</code> - <code>runH</code> - <code>nextH</code> - <code>closeH</code> can be used instead to gain access to results at intermediate time periods and directly adjust link status and control settings as a simulation proceeds.</p>"},{"location":"api/project-functions/hydraulic-analysis/#usehydfile","title":"useHydFile","text":"<p>Uses a previously saved binary hydraulics file to supply a project's hydraulics.</p> <pre><code>useHydFile(filename: string): void\n</code></pre> <p>Parameters</p> Parameter Type Description filename <code> String</code> the name of the binary file containing hydraulic results. <p>Call this function to re-use a set of hydraulic analysis results saved previously. This can save computational time if water quality analyses are being made under the same set of hydraulic conditions.</p> <p>Do not call this function while the hydraulics solver is open.</p>"},{"location":"api/project-functions/hydraulic-analysis/#openh","title":"openH","text":"<p>Opens a project's hydraulic solver.</p> <pre><code>openH(): void\n</code></pre> <p>Call <code>openH</code> prior to running the first hydraulic analysis using the <code>initH</code> - <code>runH</code> - <code>nextH</code> sequence. Multiple analyses can be made before calling <code>closeH</code> to close the hydraulic solver.</p> <p>Do not call this function if <code>solveH</code> is being used to run a complete hydraulic analysis or if hydraulics are being supplied by a previously saved hydraulics file using <code>useHydFile</code>.</p>"},{"location":"api/project-functions/hydraulic-analysis/#inith","title":"initH","text":"<p>Initializes a network prior to running a hydraulic analysis.</p> <pre><code>initH(initFlag: InitHydOption): void\n</code></pre> <p>Parameters</p> Parameter Type Description initFlag <code> InitHydOption</code> a 2-digit initialization flag (see <code>InitHydOption</code>). <p>This function initializes storage tank levels, link status and settings, and the simulation time clock prior to running a hydraulic analysis.</p> <p>The initialization flag is a two digit number where the 1st (left) digit indicates if link flows should be re-initialized (1) or not (0), and the 2nd digit indicates if hydraulic results should be saved to a temporary binary hydraulics file (1) or not (0).</p> <p>Be sure to call <code>initH</code> prior to running a hydraulic analysis using a <code>runH</code> - <code>nextH</code> loop.</p> <p>Choose to save hydraulics results if you will be:</p> <ul> <li>making a subsequent water quality run,</li> <li>using <code>report</code> to generate a report</li> <li>using <code>saveHydFile</code> to save the binary hydraulics file.</li> </ul> <p>There is no need to save hydraulics if you will be writing custom code to process hydraulic results as they are generated using the functions <code>getNodeValue</code> and <code>getLinkValue</code>.</p>"},{"location":"api/project-functions/hydraulic-analysis/#runh","title":"runH","text":"<p>Computes a hydraulic solution for the current point in time.</p> <pre><code>runH(): Number\n</code></pre> <p>Returns</p> <p><code>Number</code> The current simulation time in seconds.</p> <p>This function is used in a loop with <code>nextH</code> to run an extended period hydraulic simulation.</p> <p><code>initH</code> must have been called prior to running the <code>runH</code> - <code>nextH</code> loop.</p>"},{"location":"api/project-functions/hydraulic-analysis/#nexth","title":"nextH","text":"<p>Determines the length of time until the next hydraulic event occurs in an extended period simulation.</p> <pre><code>nextH(): Number\n</code></pre> <p>Returns</p> <p><code>Number</code> The time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration.</p> <p>This function is used in a loop with <code>runH</code> to run an extended period hydraulic simulation.</p> <p>The return value is automatically computed as the smaller of:</p> <ul> <li>the time interval until the next hydraulic time step begins</li> <li>the time interval until the next reporting time step begins</li> <li>the time interval until the next change in demands occurs</li> <li>the time interval until a tank becomes full or empty</li> <li>the time interval until a control or rule fires.</li> </ul>"},{"location":"api/project-functions/hydraulic-analysis/#saveh","title":"saveH","text":"<p>Transfers a project's hydraulics results from its temporary hydraulics file to its binary output file, where results are only reported at uniform reporting intervals.</p> <pre><code>saveH(): void\n</code></pre> <p><code>saveH</code> is used when only a hydraulic analysis is run and results at uniform reporting intervals need to be transferred to a project's binary output file. Such would be the case when results are to be written in formatted fashion to the project's report file using <code>report</code>.</p>"},{"location":"api/project-functions/hydraulic-analysis/#savehydfile","title":"saveHydFile","text":"<p>Saves a project's temporary hydraulics file to disk.</p> <pre><code>saveHydFile( filename: String): void\n</code></pre> <p>Parameters</p> Parameter Type Description filename <code> String</code> the name of the file to be created. <p>Use this function to save the current set of hydraulics results to a file, either for post-processing or to be used at a later time by calling the <code>useHydFile</code> function.</p> <p>The hydraulics file contains nodal demands and heads and link flows, status, and settings for all hydraulic time steps, even intermediate ones.</p> <p>Before calling this function hydraulic results must have been generated and saved by having called <code>solveH</code> or the <code>initH</code> - <code>runH</code> - <code>nextH</code> sequence with the <code>initflag</code> argument of <code>initH</code> set to <code>InitHydOption.Save</code> or <code>InitHydOption.SaveAndInit</code>.</p>"},{"location":"api/project-functions/hydraulic-analysis/#closeh","title":"closeH","text":"<p>Closes the hydraulic solver freeing all of its allocated memory.</p> <pre><code>closeH(): void\n</code></pre> <p>Call <code>closeH</code> after all hydraulics analyses have been made using <code>initH</code> - <code>runH</code> - <code>nextH</code>. Do not call this function if <code>solveH</code> is being used.</p>"},{"location":"api/project-functions/network-link/","title":"Network Link Functions","text":"<p>These functions are used for working with network links.</p> Function Description <code>addLink</code> Adds a new link to a project. <code>deleteLink</code> Deletes a link from the project. <code>getLinkIndex</code> Gets the index of a link given its ID name. <code>getLinkId</code> Gets the ID name of a link given its index. <code>setLinkId</code> Changes the ID name of a link. <code>getLinkType</code> Retrieves a link's type. <code>setLinkType</code> Changes a link's type. <code>getLinkNodes</code> Gets the indexes of a link's start- and end-nodes. <code>setLinkNodes</code> Sets the indexes of a link's start- and end-nodes. <code>getLinkValue</code> Retrieves a property value for a link. <code>setLinkValue</code> Sets a property value for a link. <code>setPipeData</code> Sets a group of properties for a pipe link. <code>getPumpType</code> Retrieves the type of head curve used by a pump. <code>getHeadCurveIndex</code> Retrieves the curve assigned to a pump's head curve. <code>setHeadCurveIndex</code> Assigns a curve to a pump's head curve. <code>getVertexCount</code> Retrieves the number of internal vertex points assigned to a link. <code>getVertex</code> Retrieves the coordinate's of a vertex point assigned to a link. <code>setVertices</code> Assigns a set of internal vertex points to a link."},{"location":"api/project-functions/network-link/#addlink","title":"addLink","text":"<p>Adds a new link to a project.</p> <pre><code>addLink(id: string, linkType: LinkType, fromNode: string, toNode: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> the ID name of the link to be added. linkType <code>LinkType</code> The type of link being added (see <code>LinkType</code>) fromNode <code>string</code> The ID name of the link's starting node. toNode <code>string</code> The ID name of the link's ending node. <p>Returns</p> <p><code>Number</code> the index of the newly added link.</p> <p>A new pipe is assigned a diameter of 10 inches (254 mm) and a length of 330 feet (~ 100 meters). Its roughness coefficient depends on the head loss formula in effect (see <code>HeadLossType</code>) as follows:</p> <ul> <li>Hazen-Williams formula: 130</li> <li>Darcy-Weisbach formula: 0.5 millifeet (0.15 mm)   *Chezy-Manning formula: 0.01</li> </ul> <p>All other pipe properties are set to 0.</p> <p>A new pump has a status of <code>LinkStatusType.Open</code>, a speed setting of 1, and has no pump curve or power rating assigned to it.</p> <p>A new valve has a diameter of 10 inches (254 mm) and all other properties set to 0.</p> <p>See <code>LinkProperty</code>.</p>"},{"location":"api/project-functions/network-link/#deletelink","title":"deleteLink","text":"<p>Deletes a link from the project.</p> <pre><code>deleteLink(index: number, actionCode: ActionCodeType): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of the link to be deleted. actionCode <code>ActionCodeType</code> The action taken if any control contains the link. <p>If actionCode is <code>ActionCodeType.Unconditional</code> then the link and all simple and rule-based controls that contain it are deleted. If set to <code>ActionCodeType.Conditional</code> then the link is not deleted if it appears in any control and error 261 is returned.</p>"},{"location":"api/project-functions/network-link/#getlinkindex","title":"getLinkIndex","text":"<p>Gets the index of a link given its ID name.</p> <pre><code>getLinkIndex(id: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> a link's ID name. <p>Returns</p> <p><code>Number</code> the link's index (starting from 1).</p>"},{"location":"api/project-functions/network-link/#getlinkid","title":"getLinkId","text":"<p>Gets the ID name of a link given its index.</p> <pre><code>getLinkId(index: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). <p>Returns</p> <p><code>string</code> The link's ID name.</p>"},{"location":"api/project-functions/network-link/#setlinkid","title":"setLinkId","text":"<p>Changes the ID name of a link.</p> <pre><code>setLinkId(index: number, newid: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). newid <code>string</code> the new ID name for the link."},{"location":"api/project-functions/network-link/#getlinktype","title":"getLinkType","text":"<p>Retrieves a link's type.</p> <pre><code>getLinkType(index: number): LinkType;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). <p>Returns</p> <p><code>LinkType</code> the link's type (see <code>LinkType</code>).</p>"},{"location":"api/project-functions/network-link/#setlinktype","title":"setLinkType","text":"<p>Changes a link's type.</p> <pre><code>setLinkType(index: number, linkType: LinkType, actionCode: ActionCodeType): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the link's index linkType <code>LinkType</code> the new type to change the link to (see <code>LinkType</code>). actionCode <code>ActionCodeType</code> the action taken if any controls contain the link. <p>Returns</p> <p><code>Number</code> the link's new index after the type change.</p> <p>If actionCode is <code>ActionCodeType.Unconditional</code> then all simple and rule-based controls that contain the link are deleted when the link's type is changed. If set to <code>ActionCodeType.Conditional</code> then the type change is cancelled if the link appears in any control and error 261 is returned.</p>"},{"location":"api/project-functions/network-link/#getlinknodes","title":"getLinkNodes","text":"<p>Gets the indexes of a link's start- and end-nodes.</p> <pre><code>getLinkNodes(index: number): {\nnode1: number;\nnode2: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  node1: number;\n  node2: number;\n}\n</code></pre> Property Type Description node1 <code>number</code> the index of the link's start node (starting from 1). node2 <code>number</code> the index of the link's end node (starting from 1)."},{"location":"api/project-functions/network-link/#setlinknodes","title":"setLinkNodes","text":"<p>Sets the indexes of a link's start- and end-nodes.</p> <pre><code>setLinkNodes(index: number, node1: number, node2: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). node1 <code>number</code> The index of the link's start node (starting from 1). node2 <code>number</code> The index of the link's end node (starting from 1)."},{"location":"api/project-functions/network-link/#getlinkvalue","title":"getLinkValue","text":"<p>Retrieves a property value for a link.</p> <pre><code>getLinkValue(index: number, property: LinkProperty): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). property <code>LinkProperty</code> the property to retrieve (see <code>LinkProperty</code>). <p>Returns</p> <p><code>Number</code> the current value of the property.</p> <p>Values are returned in units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-link/#setlinkvalue","title":"setLinkValue","text":"<p>Sets a property value for a link.</p> <pre><code>setLinkValue(index: number, property: number, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index. property <code>number</code> the property to set (see <code>LinkProperty</code>). value <code>number</code> the new value for the property. <p>Values are in units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-link/#setpipedata","title":"setPipeData","text":"<p>Sets a group of properties for a pipe link.</p> <pre><code>setPipeData(index: number, length: number, diam: number, rough: number, mloss: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of a pipe link (starting from 1). length <code>number</code> the pipe's length. diam <code>number</code> the pipe's diameter. rough <code>number</code> the pipe's roughness coefficient. mloss <code>number</code> the pipe's minor loss coefficient. <p>These properties have units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-link/#getpumptype","title":"getPumpType","text":"<p>Retrieves the type of head curve used by a pump.</p> <pre><code>getPumpType(index: number): PumpType;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of a pump link (starting from 1). <p>Returns</p> <p><code>PumpType</code> the type of head curve used by the pump (see <code>PumpType</code>).</p>"},{"location":"api/project-functions/network-link/#getheadcurveindex","title":"getHeadCurveIndex","text":"<p>Retrieves the curve assigned to a pump's head curve.</p> <pre><code>getHeadCurveIndex(linkIndex: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description linkIndex <code>number</code> the index of a pump link (starting from 1). <p>Returns</p> <p><code>Number</code> the index of the curve assigned to the pump's head curve.</p>"},{"location":"api/project-functions/network-link/#setheadcurveindex","title":"setHeadCurveIndex","text":"<p>Assigns a curve to a pump's head curve.</p> <pre><code>setHeadCurveIndex(linkIndex: number, curveIndex: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description linkIndex <code>number</code> the index of a pump link (starting from 1). curveIndex <code>number</code> the index of a curve to be assigned as the pump's head curve."},{"location":"api/project-functions/network-link/#getvertexcount","title":"getVertexCount","text":"<p>Retrieves the number of internal vertex points assigned to a link.</p> <pre><code>getVertexCount(index: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). <p>Returns</p> <p><code>Number</code> the number of vertex points that describe the link's shape.</p>"},{"location":"api/project-functions/network-link/#getvertex","title":"getVertex","text":"<p>Retrieves the coordinate's of a vertex point assigned to a link.</p> <pre><code>getVertex(index: number, vertex: number): {\nx: number;\ny: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). vertex <code>number</code> a vertex point index (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  x: number;\n  y: number;\n}\n</code></pre> Property Type Description x <code>number</code> the vertex's X-coordinate value. y <code>number</code> the vertex's Y-coordinate value."},{"location":"api/project-functions/network-link/#setvertices","title":"setVertices","text":"<p>Assigns a set of internal vertex points to a link.</p> <pre><code>setVertices(index: number, x: number[], y: number[]): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a link's index (starting from 1). x <code>Number[]</code> an array of X-coordinates for the vertex points. y <code>Number[]</code> an array of Y-coordinates for the vertex points. <p>Replaces any existing vertices previously assigned to the link.</p>"},{"location":"api/project-functions/network-node/","title":"Network Node Functions","text":"<p>These functions are used for working with network nodes. More...</p> Function Description <code>addNode</code> Adds a new node to a project. <code>deleteNode</code> Deletes a node from a project. <code>getNodeIndex</code> Gets the index of a node given its ID name. <code>getNodeId</code> Gets the ID name of a node given its index. <code>setNodeId</code> Changes the ID name of a node. <code>getNodeType</code> Retrieves a node's type given its index. <code>getNodeValue</code> Retrieves a property value for a node. <code>setNodeValue</code> Sets a property value for a node. <code>setJunctionData</code> Sets a group of properties for a junction node. <code>setTankData</code> Sets a group of properties for a tank node. <code>getCoordinates</code> Gets the (x,y) coordinates of a node. <code>setCoordinates</code> Sets the (x,y) coordinates of a node."},{"location":"api/project-functions/network-node/#addnode","title":"addNode","text":"<p>Adds a new node to a project.</p> <pre><code>addNode(id: string, nodeType: NodeType): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> the ID name of the node to be added. nodeType <code>NodeType</code> the type of node being added (see <code>NodeType</code>) <p>Returns</p> <p><code>Number</code> the index of the newly added node</p> <p>When a new node is created all of its properties (see <code>NodeProperty</code>) are set to 0.</p>"},{"location":"api/project-functions/network-node/#deletenode","title":"deleteNode","text":"<p>Deletes a node from a project.</p> <pre><code>deleteNode(index: number, actionCode: ActionCodeType): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of the node to be deleted. actionCode <code>ActionCodeType</code> the action taken if any control contains the node and its links. <p>If actionCode is <code>ActionCodeType.Unconditional</code> then the node, its incident links and all simple and rule-based controls that contain them are deleted. If set to <code>ActionCodeType.Conditional</code> then the node is not deleted if it or its incident links appear in any controls and error code 261 is returned.</p>"},{"location":"api/project-functions/network-node/#getnodeindex","title":"getNodeIndex","text":"<p>Gets the index of a node given its ID name.</p> <pre><code>getNodeIndex(id: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> a node ID name. <p>Returns</p> <p><code>Number</code> the node's index (starting from 1).</p>"},{"location":"api/project-functions/network-node/#getnodeid","title":"getNodeId","text":"<p>Gets the ID name of a node given its index.</p> <pre><code>getNodeId(index: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node's index (starting from 1). <p>Returns</p> <p><code>String</code> the node's ID name.</p>"},{"location":"api/project-functions/network-node/#setnodeid","title":"setNodeId","text":"<p>Changes the ID name of a node.</p> <pre><code>setNodeId(index: number, newid: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node's index (starting from 1). newid <code>string</code> the new ID name for the node."},{"location":"api/project-functions/network-node/#getnodetype","title":"getNodeType","text":"<p>Retrieves a node's type given its index.</p> <pre><code>getNodeType(index: number): NodeType;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node's index (starting from 1). <p>Returns</p> <p><code>NodeType</code> the node's type (see <code>NodeType</code>).</p>"},{"location":"api/project-functions/network-node/#getnodevalue","title":"getNodeValue","text":"<p>Retrieves a property value for a node.</p> <pre><code>getNodeValue(index: number, property: NodeProperty): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node's index. property <code>NodeProperty</code> the property to retrieve (see <code>NodeProperty</code>). <p>Returns</p> <p><code>Number</code> the current value of the property.</p> <p>Values are returned in units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-node/#setnodevalue","title":"setNodeValue","text":"<p>Sets a property value for a node.</p> <pre><code>setNodeValue(index: number, property: NodeProperty, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node's index (starting from 1). property <code>NodeProperty</code> the property to set (see <code>NodeProperty</code>). value <code>number</code> the new value for the property. <p>Values are in units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-node/#setjunctiondata","title":"setJunctionData","text":"<p>Sets a group of properties for a junction node.</p> <pre><code>setJunctionData(index: number, elev: number, dmnd: number, dmndpat: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a junction node's index (starting from 1). elev <code>number</code> the value of the junction's elevation. dmnd <code>number</code> the value of the junction's primary base demand. dmndpat <code>string</code> the ID name of the demand's time pattern (\"\" for no pattern) <p>These properties have units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-node/#settankdata","title":"setTankData","text":"<p>Sets a group of properties for a tank node.</p> <pre><code>setTankData(index: number, elev: number, initlvl: number, minlvl: number, maxlvl: number, diam: number, minvol: number, volcurve: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a tank node's index (starting from 1). elev <code>number</code> the tank's bottom elevation. initlvl <code>number</code> the initial water level in the tank. minlvl <code>number</code> the minimum water level for the tank. maxlvl <code>number</code> the maximum water level for the tank. diam <code>number</code> the tank's diameter (0 if a volume curve is supplied). minvol <code>number</code> the volume of the tank at its minimum water level. volcurve <code>string</code> the name of the tank's volume curve (\"\" for no curve) <p>These properties have units that depend on the units used for flow rate (see Measurement Units).</p>"},{"location":"api/project-functions/network-node/#getcoordinates","title":"getCoordinates","text":"<p>Gets the (x,y) coordinates of a node.</p> <pre><code>getCoordinates(index: number): {\nx: number;\ny: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node index (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  x: number;\n  y: number;\n}\n</code></pre> Property Type Description x <code>number</code> the node's X-coordinate value. y <code>number</code> the node's Y-coordinate value."},{"location":"api/project-functions/network-node/#setcoordinates","title":"setCoordinates","text":"<p>Sets the (x,y) coordinates of a node.</p> <pre><code>setCoordinates(index: number, x: number, y: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a node index (starting from 1). x <code>number</code> the node's X-coordinate value. y <code>number</code> the node's Y-coordinate value."},{"location":"api/project-functions/nodal-demand/","title":"Nodal Demand Functions","text":"<p>These functions are used for managing nodal demands.</p> Function Description <code>addDemand</code> appends a new demand to a junction node demands list. <code>deleteDemand</code> deletes a demand from a junction node. <code>getBaseDemand</code> Gets the base demand for one of a node's demand categories. <code>getDemandIndex</code> Retrieves the index of a node's named demand category. <code>getDemandModel</code> Retrieves the type of demand model in use and its parameters. <code>getDemandName</code> Retrieves the name of a node's demand category. <code>getDemandPattern</code> Retrieves the index of a time pattern assigned to one of a node's demand categories. <code>getNumberOfDemands</code> Retrieves the number of demand categories for a junction node. <code>setBaseDemand</code> Sets the base demand for one of a node's demand categories. <code>setDemandModel</code> Sets the type of demand model to use and its parameters. <code>setDemandName</code> Assigns a name to a node's demand category. <code>setDemandPattern</code> Sets the index of a time pattern used for one of a node's demand categories."},{"location":"api/project-functions/nodal-demand/#adddemand","title":"addDemand","text":"<p>appends a new demand to a junction node demands list.</p> <pre><code>addDemand(nodeIndex: number, baseDemand: number, demandPattern: string, demandName: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> the index of a node (starting from 1). baseDemand <code>number</code> the demand's base value. demandPattern <code>string</code> the name of a time pattern used by the demand demandName <code>string</code> the name of the demand's category <p>A NULL or blank string can be used for demandPattern and for demandName to indicate that no time pattern or category name is associated with the demand.</p>"},{"location":"api/project-functions/nodal-demand/#deletedemand","title":"deleteDemand","text":"<p>Deletes a demand from a junction node.</p> <pre><code>deleteDemand(nodeIndex: number, demandIndex: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code> </code> the index of a node (starting from 1). demandIndex <code> </code> the position of the demand in the node's demands list (starting from 1)."},{"location":"api/project-functions/nodal-demand/#getbasedemand","title":"getBaseDemand","text":"<p>Gets the base demand for one of a node's demand categories.</p> <pre><code>getBaseDemand(nodeIndex: number, demandIndex: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> a node's index (starting from 1). demandIndex <code>number</code> the index of a demand category for the node (starting from 1). <p>Returns</p> <p><code>Number</code> the category's base demand.</p>"},{"location":"api/project-functions/nodal-demand/#getdemandindex","title":"getDemandIndex","text":"<p>Retrieves the index of a node's named demand category.</p> <pre><code>getDemandIndex(nodeIndex: number, demandName: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> the index of a node (starting from 1) demandName <code>string</code> the name of a demand category for the node <p>Returns</p> <p><code>Number</code> the index of the demand being sought</p>"},{"location":"api/project-functions/nodal-demand/#getdemandmodel","title":"getDemandModel","text":"<p>Retrieves the type of demand model in use and its parameters.</p> <pre><code>getDemandModel(): {\ntype: DemandModel;\npmin: number;\npreq: number;\npexp: number;\n};\n</code></pre> <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  type: DemandModel;\n  pmin: number;\n  preq: number;\n  pexp: number;\n}\n</code></pre> Property Type Description type <code>DemandModel</code> Type of demand model (see <code>DemandModel</code>). pmin <code>number</code> Pressure below which there is no demand. preq <code>number</code> Pressure required to deliver full demand. pexp <code>number</code> Pressure exponent in demand function. <p>Parameters pmin, preq, and pexp are only used when the demand model is <code>DemandModel.PDA</code>.</p>"},{"location":"api/project-functions/nodal-demand/#getdemandname","title":"getDemandName","text":"<p>Retrieves the name of a node's demand category.</p> <pre><code>getDemandName(nodeIndex: number, demandIndex: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> a node's index (starting from 1). demandIndex <code>number</code> the index of one of the node's demand categories (starting from 1). <p>Returns</p> <p><code>String</code> The name of the selected category.</p>"},{"location":"api/project-functions/nodal-demand/#getdemandpattern","title":"getDemandPattern","text":"<p>Retrieves the index of a time pattern assigned to one of a node's demand categories.</p> <pre><code>getDemandPattern(nodeIndex: number, demandIndex: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> the node's index (starting from 1). demandIndex <code>number</code> the index of a demand category for the node (starting from 1). <p>Returns</p> <p><code>Number</code> the index of the category's time pattern.</p> <p>A returned pattern index of 0 indicates that no time pattern has been assigned to the demand category.</p>"},{"location":"api/project-functions/nodal-demand/#getnumberofdemands","title":"getNumberOfDemands","text":"<p>Retrieves the number of demand categories for a junction node.</p> <pre><code>getNumberOfDemands(nodeIndex: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> the index of a node (starting from 1). <p>Returns</p> <p><code>Number</code> the number of demand categories assigned to the node.</p>"},{"location":"api/project-functions/nodal-demand/#setbasedemand","title":"setBaseDemand","text":"<p>Sets the base demand for one of a node's demand categories.</p> <pre><code>setBaseDemand(nodeIndex: number, demandIndex: number, baseDemand: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> a node's index (starting from 1). demandIndex <code>number</code> the index of a demand category for the node (starting from 1). baseDemand <code>number</code> the new base demand for the category."},{"location":"api/project-functions/nodal-demand/#setdemandmodel","title":"setDemandModel","text":"<p>Sets the type of demand model to use and its parameters.</p> <pre><code>setDemandModel(type: DemandModel, pmin: number, preq: number, pexp: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description type <code>DemandModel</code> Type of demand model (see <code>DemandModel</code>). pmin <code>number</code> Pressure below which there is no demand. preq <code>number</code> Pressure required to deliver full demand. pexp <code>number</code> Pressure exponent in demand function. <p>Set type to EN_DDA for a traditional demand driven analysis (in which case the remaining three parameter values are ignored) or to EN_PDA for a pressure driven analysis. In the latter case a node's demand is computed as:</p> <p><code>Dfull * [ (P - pmin) / (preq - pmin) ] ^ pexp</code></p> <p>where Dfull is the full demand and P is the current pressure.</p> <p>Setting preq equal to pmin will result in a solution with the smallest amount of demand reductions needed to insure that no node delivers positive demand at a pressure below pmin.</p>"},{"location":"api/project-functions/nodal-demand/#setdemandname","title":"setDemandName","text":"<p>Assigns a name to a node's demand category.</p> <pre><code>setDemandName(nodeIndex: number, demandIdx: number, demandName: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> a node's index (starting from 1). demandIdx <code>number</code> the index of one of the node's demand categories (starting from 1). demandName <code>string</code> the new name assigned to the category."},{"location":"api/project-functions/nodal-demand/#setdemandpattern","title":"setDemandPattern","text":"<p>Sets the index of a time pattern used for one of a node's demand categories.</p> <pre><code>setDemandPattern(nodeIndex: number, demandIndex: number, patIndex: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description nodeIndex <code>number</code> a node's index (starting from 1). demandIndex <code>number</code> the index of one of the node's demand categories (starting from 1). patIndex <code>number</code> the index of the time pattern assigned to the category. <p>Specifying a pattern index of 0 indicates that no time pattern is assigned to the demand category.</p>"},{"location":"api/project-functions/project/","title":"Project Functions","text":"<p>These functions are used to manage a project.</p> Function Description <code>open</code> Opens an EPANET input file &amp; reads in network data. <code>close</code> Closes a project and frees all of its memory. <code>runProject</code> Runs a complete EPANET simulation. <code>init</code> Initializes an EPANET project. <code>getCount</code> Retrieves the number of objects of a given type in a project. <code>getTitle</code> Retrieves the title lines of the project. <code>setTitle</code> Sets the title lines of the project. <code>saveInpFile</code> Saves a project's data to an EPANET-formatted text file."},{"location":"api/project-functions/project/#runproject","title":"runProject","text":"<p>Runs a complete EPANET simulation.</p> <pre><code>runProject(\n  inputFile: String,\n  reportFile: String,\n  outputFile: String\n  ): void\n</code></pre> <p>Parameters</p> Parameter Type Description inputFile <code>String </code> the name of an existing EPANET-formatted input file. reportFile <code>String </code> the name of a report file to be created (or \"\" if not needed) outputFile <code>String </code> the name of a binary output file to be created (or \"\" if not needed) <p>Future versions of the epanetJS library will include the ability to attach a callback function similar to the <code>EN_runproject</code> function in <code>OWA-EPANET</code>.</p>"},{"location":"api/project-functions/project/#init","title":"init","text":"<p>Initializes an EPANET project.</p> <pre><code>init(rptFile: String, outFile: String, unitType: FlowUnits, headLosstype: HeadLossType): void\n</code></pre> <p>Parameters</p> Parameter Type Description rptFile <code>String</code> the name of a report file to be created (or \"\" if not needed) outFile <code>String</code> the name of a binary output file to be created (or \"\" if not needed). unitType <code>FlowUnits</code> the choice of flow units (see <code>FlowUnits</code>) headLosstype <code>HeadLossType</code> the choice of head loss formula (see <code>HeadLossType</code>) <p>This function should be called immediately after a <code>Project</code> object is created if an EPANET-formatted input file will not be used to supply network data. If the project receives it's network data from an input file then there is no need to call this function.</p>"},{"location":"api/project-functions/project/#open","title":"open","text":"<p>Opens an EPANET input file &amp; reads in network data.</p> <pre><code>open(inputFile: String, reportFile: String, outputFile: String): void\n</code></pre> <p>Parameters</p> Parameter Type Description inputFile <code> String</code> the name of an existing EPANET-formatted input file. reportFile <code>String </code> the name of a report file to be created (or \"\" if not needed). outputFile <code> String</code> the name of a binary output file to be created (or \"\" if not needed)."},{"location":"api/project-functions/project/#getcount","title":"getCount","text":"<p>Retrieves the number of objects of a given type in a project.</p> <pre><code>getCount(obj: CountType): Number\n</code></pre> <p>Parameters</p> Parameter Type Description obj <code>CountType</code> a type of object to count. (see <code>CountType</code>) <p>Returns</p> <p><code>Number</code> The number of objects of the specified type</p>"},{"location":"api/project-functions/project/#gettitle","title":"getTitle","text":"<p>Retrieves the title lines of the project.</p> <pre><code>getTitle(): Object\n</code></pre> <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  line1: String;\n  line2: String;\n  line3: String;\n}\n</code></pre> Property Type Description line1 <code>String</code> first title line. line2 <code>String</code> second title line. line3 <code>String</code> third title line."},{"location":"api/project-functions/project/#settitle","title":"setTitle","text":"<p>Sets the title lines of the project.</p> <pre><code>setTitle( line1: String, line2: String, line3: String): void\n</code></pre> <p>Parameters</p> Parameter Type Description line1 <code>String</code> first title line. line2 <code>String</code> second title line. line3 <code>String</code> third title line."},{"location":"api/project-functions/project/#saveinpfile","title":"saveInpFile","text":"<p>Saves a project's data to an EPANET-formatted text file.</p> <pre><code>saveInpFile( filename: String): void\n</code></pre> <p>Parameters</p> Parameter Type Description filename <code>String </code> the name of the file to create."},{"location":"api/project-functions/project/#close","title":"close","text":"<p>Closes a project and frees all of its memory.</p> <pre><code>close(): void\n</code></pre> <p>This function clears all existing data from a project but does not delete the project, so it can be re-used with another set of network data.</p>"},{"location":"api/project-functions/reporting/","title":"Reporting Functions","text":"<p>These functions are used to report simulation results.</p> Function Description <code>writeLine</code> Writes a line of text to a project's report file. <code>report</code> Writes simulation results in a tabular format to a project's report file. <code>copyReport</code> Copies the current contents of a project's report file to another file. <code>clearReport</code> Clears the contents of a project's report file. <code>resetReport</code> Resets a project's report options to their default values. <code>setReport</code> Processes a reporting format command. <code>setStatusReport</code> Sets the level of hydraulic status reporting. <code>getStatistic</code> Retrieves a particular simulation statistic. <code>getResultIndex</code> Retrieves the order in which a node or link appears in an\u00a0output file."},{"location":"api/project-functions/reporting/#writeline","title":"writeLine","text":"<p>Writes a line of text to a project's report file.</p> <pre><code>writeLine(line: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description line <code> String </code> a text string to write."},{"location":"api/project-functions/reporting/#report","title":"report","text":"<p>Writes simulation results in a tabular format to a project's report file.</p> <pre><code>report(): void;\n</code></pre> <p>Either a full hydraulic analysis or full hydraulic and water quality analysis must have been run, with results saved to file, before <code>report</code> is called. In the former case, <code>saveH</code> must also be called first to transfer results from the project's intermediate hydraulics file to its output file.</p> <p>The format of the report is controlled by commands issued with <code>setreport</code>.</p>"},{"location":"api/project-functions/reporting/#copyreport","title":"copyReport","text":"<p>Copies the current contents of a project's report file to another file.</p> <pre><code>copyReport(filename: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description filename <code>String</code> the full path name of the destination file. <p>This function allows toolkit clients to retrieve the contents of a project's report file while the project is still open.</p>"},{"location":"api/project-functions/reporting/#clearreport","title":"clearReport","text":"<p>Clears the contents of a project's report file.</p> <pre><code>clearReport(): void;\n</code></pre>"},{"location":"api/project-functions/reporting/#resetreport","title":"resetReport","text":"<p>Resets a project's report options to their default values.</p> <pre><code>resetReport(): void;\n</code></pre> <p>After calling this function the default reporting options are in effect. These are:</p> <ul> <li>no status report</li> <li>no energy report</li> <li>no nodes reported on</li> <li>no links reported on</li> <li>node variables reported to 2 decimal places</li> <li>link variables reported to 2 decimal places (3 for friction factor)</li> <li>node variables reported are elevation, head, pressure, and quality</li> <li>link variables reported are flow, velocity, and head loss.</li> </ul>"},{"location":"api/project-functions/reporting/#setreport","title":"setReport","text":"<p>Processes a reporting format command.</p> <pre><code>setReport(format: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description format <code>String</code> a report formatting command. <p>Acceptable report formatting commands are described in the [REPORT] section of the Input File topic.</p> <p>Formatted results of a simulation can be written to a project's report file using the <code>report</code> function.</p>"},{"location":"api/project-functions/reporting/#setstatusreport","title":"setStatusReport","text":"<p>Sets the level of hydraulic status reporting.</p> <pre><code>setStatusReport(level: StatusReport): void;\n</code></pre> <p>Parameters</p> Parameter Type Description level <code>StatusReport </code> a status reporting level code (see <code>StatusReport</code>). <p>Status reporting writes changes in the hydraulics status of network elements to a project's report file as a hydraulic simulation unfolds. There are three levels of reporting: <code>StatusReport.NoReport</code> (no status reporting), <code>StatusReport.NormalReport</code> (normal reporting) <code>StatusReport.FullReport</code> (full status reporting).</p> <p>The full status report contains information at each trial of the solution to the system hydraulic equations at each time step of a simulation. It is useful mainly for debugging purposes.</p> <p>If many hydraulic analyses will be run in the application it is recommended that status reporting be turned off (level = <code>StatusReport.NoReport</code>).</p>"},{"location":"api/project-functions/reporting/#getstatistic","title":"getStatistic","text":"<p>Retrieves a particular simulation statistic.</p> <pre><code>getStatistic(type: AnalysisStatistic): number;\n</code></pre> <p>Parameters</p> Parameter Type Description type <code>AnalysisStatistic</code> the type of statistic to retrieve (see <code>AnalysisStatistic</code>). <p>Returns</p> <p><code>Number</code> the value of the statistic.</p>"},{"location":"api/project-functions/reporting/#getresultindex","title":"getResultIndex","text":"<p>Retrieves the order in which a node or link appears in an output file.</p> <pre><code>getResultIndex(type: ObjectType.Node | ObjectType.Link, index: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description type <code>ObjectType.Node</code> <code>ObjectType.Link</code> a type of element (either <code>ObjectType.Node</code> or <code>ObjectType.Link</code>). index <code>Number</code> the element's current index (starting from 1). <p>Returns</p> <p><code>Number</code> the order in which the element's results were written to file.</p> <p>If the element does not appear in the file then its result index is 0.</p> <p>This function can be used to correctly retrieve results from an EPANET binary output file after the order of nodes or links in a network's database has been changed due to editing operations.</p>"},{"location":"api/project-functions/rule-based-control/","title":"Rule-Based Control Functions","text":"<p>These functions are used for working with rule-based controls.</p> Function Description <code>addRule</code> Adds a new rule-based control to a project. <code>deleteRule</code> Deletes an existing rule-based control. <code>getRule</code> Retrieves summary information about a rule-based control. <code>getRuleId</code> Gets the ID name of a rule-based control given its index. <code>getPremise</code> Gets the properties of a premise in a rule-based control. <code>setPremise</code> Sets the properties of a premise in a rule-based control. <code>setPremiseIndex</code> Sets the index of an object in a premise of a rule-based control. <code>setPremiseStatus</code> Sets the status being compared to in a premise of a rule-based control. <code>setPremiseValue</code> Sets the value in a premise of a rule-based control. <code>getThenAction</code> Gets the properties of a THEN action in a rule-based control. <code>setThenAction</code> Sets the properties of a THEN action in a rule-based control. <code>getElseAction</code> Gets the properties of an ELSE action in a rule-based control. <code>setElseAction</code> Sets the properties of an ELSE action in a rule-based control. <code>setRulePriority</code> Sets the priority of a rule-based control."},{"location":"api/project-functions/rule-based-control/#addrule","title":"addRule","text":"<p>Adds a new rule-based control to a project.</p> <pre><code>addRule(rule: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description rule <code>rule</code> text of the rule following the format used in an EPANET input file. <p>Consult the [RULES] section of the Input File topic to learn about a rule's format. Each clause of the rule must end with a newline character \\n.</p>"},{"location":"api/project-functions/rule-based-control/#deleterule","title":"deleteRule","text":"<p>Deletes an existing rule-based control.</p> <pre><code>deleteRule(index: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of the rule to be deleted (starting from 1)."},{"location":"api/project-functions/rule-based-control/#getrule","title":"getRule","text":"<p>Retrieves summary information about a rule-based control.</p> <pre><code>getRule(index: number): {\npremiseCount: number;\nthenActionCount: number;\nelseActionCount: number;\npriority: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the rule's index (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  premiseCount: number;\n  thenActionCount: number;\n  elseActionCount: number;\n  priority: number;\n}\n</code></pre> Property Type Description premiseCount <code>number</code> number of premises in the rule's IF section. thenActionCount <code>number</code> number of actions in the rule's THEN section. elseActionCount <code>number</code> number of actions in the rule's ELSE section. priority <code>number</code> the rule's priority value."},{"location":"api/project-functions/rule-based-control/#getruleid","title":"getRuleId","text":"<p>Gets the ID name of a rule-based control given its index.</p> <pre><code>getRuleId(index: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the rule's index (starting from 1). <p>Returns</p> <p><code>string</code> the rule's ID name.</p>"},{"location":"api/project-functions/rule-based-control/#getpremise","title":"getPremise","text":"<p>Gets the properties of a premise in a rule-based control.</p> <pre><code>getPremise(ruleIndex: number, premiseIndex: number): {\nlogop: number;\nobject: RuleObject;\nobjIndex: number;\nvariable: RuleVariable;\nrelop: RuleOperator;\nstatus: RuleStatus;\nvalue: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number </code> the rule's index (starting from 1). premiseIndex <code>number </code> the position of the premise in the rule's list of premises (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  logop: number;\n  object: RuleObject;\n  objIndex: number;\n  variable: RuleVariable;\n  relop: RuleOperator;\n  status: RuleStatus;\n  value: number;\n}\n</code></pre> Property Type Description logop <code>number</code> the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object <code>RuleObject</code> the type of object the premise refers to (see <code>RuleObject</code>). objIndex <code>number</code> the index of the object (e.g. the index of a tank). variable <code>RuleVariable</code> the object's variable being compared (see <code>RuleVariable</code>). relop <code>RuleOperator</code> the premise's comparison operator (see <code>RuleOperator</code>). status <code>RuleStatus</code> the status that the object's status is compared to (see <code>RuleStatus</code>). value <code>number</code> the value that the object's variable is compared to."},{"location":"api/project-functions/rule-based-control/#setpremise","title":"setPremise","text":"<p>Sets the properties of a premise in a rule-based control.</p> <pre><code>setPremise(ruleIndex: number, premiseIndex: number, logop: number, object: RuleObject, objIndex: number, variable: RuleVariable, relop: RuleOperator, status: RuleStatus, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number </code> the rule's index (starting from 1). premiseIndex <code>number </code> the position of the premise in the rule's list of premises (starting from 1). logop <code>number</code> the premise's logical operator ( IF = 1, AND = 2, OR = 3 ). object <code>RuleObject</code> the type of object the premise refers to (see <code>RuleObject</code>). objIndex <code>number</code> the index of the object (e.g. the index of a tank). variable <code>RuleVariable</code> the object's variable being compared (see <code>RuleVariable</code>). relop <code>RuleOperator</code> the premise's comparison operator (see <code>RuleOperator</code>). status <code>RuleStatus</code> the status that the object's status is compared to (see <code>RuleStatus</code>). value <code>number</code> the value that the object's variable is compared to."},{"location":"api/project-functions/rule-based-control/#setpremiseindex","title":"setPremiseIndex","text":"<p>Sets the index of an object in a premise of a rule-based control.</p> <pre><code>setPremiseIndex(ruleIndex: number, premiseIndex: number, objIndex: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). premiseIndex <code>number</code> the premise's index (starting from 1). objIndex <code>number</code> the index of the premise's object (e.g. the index of a tank)."},{"location":"api/project-functions/rule-based-control/#setpremisestatus","title":"setPremiseStatus","text":"<p>Sets the status being compared to in a premise of a rule-based control.</p> <pre><code>setPremiseStatus(ruleIndex: number, premiseIndex: number, status: RuleStatus): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). premiseIndex <code>number</code> the premise's index (starting from 1). status <code>RuleStatus</code> the status that the premise's object status is compared to (see <code>RuleStatus</code>)."},{"location":"api/project-functions/rule-based-control/#setpremisevalue","title":"setPremiseValue","text":"<p>Sets the value in a premise of a rule-based control.</p> <pre><code>setPremiseValue(ruleIndex: number, premiseIndex: number, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). premiseIndex <code>number</code> the premise's index (starting from 1). value <code>number</code> The value that the premise's variable is compared to."},{"location":"api/project-functions/rule-based-control/#getthenaction","title":"getThenAction","text":"<p>Gets the properties of a THEN action in a rule-based control.</p> <pre><code>getThenAction(ruleIndex: number, actionIndex: number): {\nlinkIndex: number;\nstatus: RuleStatus;\nsetting: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). actionIndex <code>number</code> the index of the THEN action to retrieve (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  linkIndex: number;\n  status: RuleStatus;\n  setting: number;\n}\n</code></pre> Property Type Description linkIndex <code>number</code> the index of the link in the action (starting from 1). status <code>RuleStatus</code> the status assigned to the link (see <code>RuleStatus</code>) setting <code>number</code> the value assigned to the link's setting."},{"location":"api/project-functions/rule-based-control/#setthenaction","title":"setThenAction","text":"<p>Sets the properties of a THEN action in a rule-based control.</p> <pre><code>setThenAction(ruleIndex: number, actionIndex: number, linkIndex: number, status: RuleStatus, setting: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code> number</code> the rule's index (starting from 1). actionIndex <code>number </code> the index of the THEN action to modify (starting from 1). linkIndex <code> number</code> the index of the link in the action. status <code>RuleStatus </code> the new status assigned to the link (see <code>RuleStatus</code>). setting <code>number </code> the new value assigned to the link's setting."},{"location":"api/project-functions/rule-based-control/#getelseaction","title":"getElseAction","text":"<p>Sets the properties of an ELSE action in a rule-based control.</p> <pre><code>getElseAction(ruleIndex: number, actionIndex: number): {\nlinkIndex: number;\nstatus: RuleStatus;\nsetting: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). actionIndex <code>number</code> the index of the ELSE action to retrieve (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  linkIndex: number;\n  status: RuleStatus;\n  setting: number;\n}\n</code></pre> Property Type Description linkIndex <code>number</code> the index of the link in the action (starting from 1). status <code>RuleStatus</code> the status assigned to the link (see <code>RuleStatus</code>) setting <code>number</code> the value assigned to the link's setting."},{"location":"api/project-functions/rule-based-control/#setelseaction","title":"setElseAction","text":"<p>Sets the properties of an ELSE action in a rule-based control.</p> <pre><code>setElseAction(ruleIndex: number, actionIndex: number, linkIndex: number, status: RuleStatus, setting: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description ruleIndex <code>number</code> the rule's index (starting from 1). actionIndex <code>number</code> the index of the ELSE action being modified (starting from 1). linkIndex <code>number</code> the index of the link in the action (starting from 1). status <code>RuleStatus</code> the status assigned to the link (see <code>RuleStatus</code>) setting <code>number</code> the value assigned to the link's setting."},{"location":"api/project-functions/rule-based-control/#setrulepriority","title":"setRulePriority","text":"<p>Sets the priority of a rule-based control.</p> <pre><code>setRulePriority(index: number, priority: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the rule's index (starting from 1). priority <code>number</code> the priority value assigned to the rule."},{"location":"api/project-functions/simple-control/","title":"Simple Control Functions","text":"<p>These functions are used for working with simple conditional controls.</p> Function Description <code>addControl</code> Adds a new simple control to a project. <code>deleteControl</code> Deletes an existing simple control. <code>getControl</code> Retrieves the properties of a simple control. <code>setControl</code> Sets the properties of an existing simple control."},{"location":"api/project-functions/simple-control/#addcontrol","title":"addControl","text":"<p>Adds a new simple control to a project.</p> <pre><code>addControl(type: ControlType, linkIndex: number, setting: number, nodeIndex: number, level: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description type <code>ControlType</code> the type of control to add (see <code>ControlType</code>). linkIndex <code>number</code> the index of a link to control (starting from 1). setting <code>number</code> control setting applied to the link. nodeIndex <code>number</code> index of the node used to control the link (0 for <code>ControlType.Timer</code> and <code>ControlType.TimeOfDay</code> controls). level <code>number</code> action level (tank level, junction pressure, or time in seconds) that triggers the control. <p>Returns</p> <p><code>Number</code> index of the new control.</p>"},{"location":"api/project-functions/simple-control/#deletecontrol","title":"deleteControl","text":"<p>Deletes an existing simple control.</p> <pre><code>deleteControl(index: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the index of the control to delete (starting from 1)."},{"location":"api/project-functions/simple-control/#getcontrol","title":"getControl","text":"<p>Retrieves the properties of a simple control.</p> <pre><code>getControl(index: number): {\ntype: ControlType;\nlinkIndex: number;\nsetting: number;\nnodeIndex: number;\nlevel: number;\n};\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the control's index (starting from 1). <p>Returns</p> <p><code>Object</code></p> <pre><code>{\n  type: ControlType;\n  linkIndex: number;\n  setting: number;\n  nodeIndex: number;\n  level: number;\n}\n</code></pre> Property Type Description type <code>ControlType</code> the type of control to add (see <code>ControlType</code>). linkIndex <code>number</code> the index of a link to control (starting from 1). setting <code>number</code> control setting applied to the link. nodeIndex <code>number</code> index of the node used to control the link (0 for <code>ControlType.Timer</code> and <code>ControlType.TimeOfDay</code> controls). level <code>number</code> action level (tank level, junction pressure, or time in seconds) that triggers the control."},{"location":"api/project-functions/simple-control/#setcontrol","title":"setControl","text":"<p>Sets the properties of an existing simple control.</p> <pre><code>setControl(index: number, type: ControlType, linkIndex: number, setting: number, nodeIndex: number, level: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the control's index (starting from 1). type <code>ControlType</code> the type of control to add (see <code>ControlType</code>). linkIndex <code>number</code> the index of a link to control (starting from 1). setting <code>number</code> control setting applied to the link. nodeIndex <code>number</code> index of the node used to control the link (0 for <code>ControlType.Timer</code> and <code>ControlType.TimeOfDay</code> controls). level <code>number</code> action level (tank level, junction pressure, or time in seconds) that triggers the control."},{"location":"api/project-functions/time-pattern/","title":"Time Pattern Functions","text":"<p>These functions are used for working with time patterns.</p> Function Description <code>addPattern</code> Adds a new time pattern to a project. <code>deletePattern</code> Deletes a time pattern from a project. <code>getPatternIndex</code> Retrieves the index of a time pattern given its ID name. <code>getPatternId</code> Retrieves the ID name of a time pattern given its index. <code>setPatternId</code> Changes the ID name of a time pattern given its index. <code>getPatternLength</code> Retrieves the number of time periods in a time pattern. <code>getPatternValue</code> Retrieves a time pattern's factor for a given time period. <code>setPatternValue</code> Sets a time pattern's factor for a given time period. <code>getAveragePatternValue</code> Retrieves the average of all pattern factors in a time pattern. <code>setPattern</code> Sets the pattern factors for a given time pattern."},{"location":"api/project-functions/time-pattern/#addpattern","title":"addPattern","text":"<p>Adds a new time pattern to a project.</p> <pre><code>addPattern(id: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code> string</code> the ID name of the pattern to add. <p>The new pattern contains a single time period whose factor is 1.0.</p>"},{"location":"api/project-functions/time-pattern/#deletepattern","title":"deletePattern","text":"<p>Deletes a time pattern from a project.</p> <pre><code>deletePattern(index: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> the time pattern's index (starting from 1)."},{"location":"api/project-functions/time-pattern/#getpatternindex","title":"getPatternIndex","text":"<p>Retrieves the index of a time pattern given its ID name.</p> <pre><code>getPatternIndex(id: string): number;\n</code></pre> <p>Parameters</p> Parameter Type Description id <code>string</code> the ID name of a time pattern. <p>Returns</p> <p><code>Number</code> the time pattern's index (starting from 1).</p>"},{"location":"api/project-functions/time-pattern/#getpatternid","title":"getPatternId","text":"<p>Retrieves the ID name of a time pattern given its index.</p> <pre><code>getPatternId(index: number): string;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). <p>Returns</p> <p><code>string</code> the time pattern's ID name.</p>"},{"location":"api/project-functions/time-pattern/#setpatternid","title":"setPatternId","text":"<p>Changes the ID name of a time pattern given its index.</p> <pre><code>setPatternId(index: number, id: string): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). id <code>string</code> the time pattern's new ID name."},{"location":"api/project-functions/time-pattern/#getpatternlength","title":"getPatternLength","text":"<p>Retrieves the number of time periods in a time pattern.</p> <pre><code>getPatternLength(index: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). <p>Returns</p> <p><code>Number</code> the number of time periods in the pattern.</p>"},{"location":"api/project-functions/time-pattern/#getpatternvalue","title":"getPatternValue","text":"<p>Retrieves a time pattern's factor for a given time period.</p> <pre><code>getPatternValue(index: number, period: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). period <code>number</code> a time period in the pattern (starting from 1). <p>Returns</p> <p><code>Number</code> the pattern factor for the given time period.</p>"},{"location":"api/project-functions/time-pattern/#setpatternvalue","title":"setPatternValue","text":"<p>Sets a time pattern's factor for a given time period.</p> <pre><code>setPatternValue(index: number, period: number, value: number): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). period <code>number</code> a time period in the pattern (starting from 1). value <code>number</code> the new value of the pattern factor for the given time period."},{"location":"api/project-functions/time-pattern/#getaveragepatternvalue","title":"getAveragePatternValue","text":"<p>Retrieves the average of all pattern factors in a time pattern.</p> <pre><code>getAveragePatternValue(index: number): number;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). <p>Returns</p> <p><code>Number</code> The average of all of the time pattern's factors.</p>"},{"location":"api/project-functions/time-pattern/#setpattern","title":"setPattern","text":"<p>Sets the pattern factors for a given time pattern.</p> <pre><code>setPattern(index: number, values: number[]): void;\n</code></pre> <p>Parameters</p> Parameter Type Description index <code>number</code> a time pattern index (starting from 1). values <code>number[]</code> an array of new pattern factor values. <p>Use this function to redefine (and resize) a time pattern all at once; use <code>setPatternValue</code> to revise pattern factors one at a time.</p>"},{"location":"api/project-functions/water-quality/","title":"Water Quality Analysis Functions","text":"<p>These functions are used to perform a water quality analysis.</p> Function Description <code>solveQ</code> Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file. <code>openQ</code> Opens a project's water quality solver. <code>initQ</code> Initializes a network prior to running a water quality analysis. <code>runQ</code> Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver. <code>nextQ</code> Advances a water quality simulation over the time until the next hydraulic event. <code>stepQ</code> Advances a water quality simulation by a single water quality time step. <code>closeQ</code> Closes the water quality solver, freeing all of its allocated memory."},{"location":"api/project-functions/water-quality/#solveq","title":"solveQ","text":"<p>Runs a complete water quality simulation with results at uniform reporting intervals written to the project's binary output file.</p> <pre><code>solveQ(): void;\n</code></pre> <p>A hydraulic analysis must have been run and saved to a hydraulics file before calling <code>solveQ</code>. This function will not allow one to examine intermediate water quality results as they are generated. It can be followed by a call to <code>report</code> to write all hydraulic and water quality results to a formatted report file.</p> <p>One can instead use the <code>openQ</code> - <code>initQ</code> - <code>runQ</code> - <code>nextQ</code> - <code>closeQ</code> sequence to gain access to water quality results at intermediate time periods.</p>"},{"location":"api/project-functions/water-quality/#openq","title":"openQ","text":"<p>Opens a project's water quality solver.</p> <pre><code>openQ(): void;\n</code></pre> <p>Call <code>openQ</code> prior to running the first water quality analysis using an <code>initQ</code> - <code>runQ</code> - <code>nextQ</code> (or <code>stepQ</code>) sequence. Multiple water quality analyses can be made before calling <code>closeQ</code> to close the water quality solver.</p> <p>Do not call this function if a complete water quality analysis will be made using <code>solveQ</code>.</p>"},{"location":"api/project-functions/water-quality/#initq","title":"initQ","text":"<p>Initializes a network prior to running a water quality analysis.</p> <pre><code>initQ(initFlag: InitHydOption.Save | InitHydOption.NoSave): void;\n</code></pre> <p>Parameters</p> Parameter Type Description initFlag <code>InitHydOption.Save </code> <code>InitHydOption.NoSave </code> set to <code>InitHydOption.Save</code> if results are to be saved to the project's binary output file, or to <code>InitHydOption.NoSave</code> if not. (see <code>InitHydOption</code>) <p>Call <code>initQ</code> prior to running a water quality analysis using <code>runQ</code> in conjunction with either <code>nextQ</code> or <code>stepQ</code>.</p> <p><code>openQ</code> must have been called prior to calling <code>initQ</code>.</p> <p>Do not call <code>initQ</code> if a complete water quality analysis will be made using <code>solveQ</code>.</p>"},{"location":"api/project-functions/water-quality/#runq","title":"runQ","text":"<p>Makes hydraulic and water quality results at the start of the current time period available to a project's water quality solver.</p> <pre><code>runQ(): number;\n</code></pre> <p>Returns</p> <p><code>Number</code> current simulation time in seconds.</p> <p>Use <code>runQ</code> along with <code>nextQ</code> in a loop to access water quality results at the start of each hydraulic period in an extended period simulation. Or use it in a loop with <code>stepQ</code> to access results at the start of each water quality time step.</p> <p><code>initQ</code> must have been called prior to running an <code>runQ</code> - <code>nextQ</code> (or <code>stepQ</code>) loop.</p> <p>The current time of the simulation is determined from information saved with the hydraulic analysis that preceded the water quality analysis.</p>"},{"location":"api/project-functions/water-quality/#nextq","title":"nextQ","text":"<p>Advances a water quality simulation over the time until the next hydraulic event.</p> <pre><code>nextQ(): number;\n</code></pre> <p>Returns</p> <p><code>Number</code> time (in seconds) until the next hydraulic event or 0 if at the end of the full simulation duration.</p> <p>This function is used in a loop with <code>runQ</code> to perform an extended period water quality analysis. It reacts and routes a project's water quality constituent over a time step determined by when the next hydraulic event occurs. Use <code>stepQ</code> instead if you wish to generate results over each water quality time step.</p> <p>The return is determined from information produced by the hydraulic analysis that preceded the water quality analysis.</p>"},{"location":"api/project-functions/water-quality/#stepq","title":"stepQ","text":"<p>Advances a water quality simulation by a single water quality time step.</p> <pre><code>stepQ(): number;\n</code></pre> <p>Returns</p> <p><code>Number</code> time left (in seconds) to the overall simulation duration.</p> <p>This function is used in a loop with <code>runQ</code> to perform an extended period water quality simulation. It allows one to generate water quality results at each water quality time step of the simulation, rather than over each hydraulic event period as with <code>nextQ</code>.</p> <p>Use the returned value to determine when no more calls to <code>runQ</code> are needed because the end of the simulation period has been reached (i.e., when timeLeft = 0).</p>"},{"location":"api/project-functions/water-quality/#closeq","title":"closeQ","text":"<p>Closes the water quality solver, freeing all of its allocated memory.</p> <pre><code>closeQ(): void;\n</code></pre> <p>Call <code>closeQ</code> after all water quality analyses have been made using the <code>initQ</code> - <code>runQ</code> - <code>nextQ</code> (or <code>stepQ</code>) sequence of function calls.</p> <p>Do not call this function if <code>solveQ</code> is being used.</p>"},{"location":"blog/","title":"epanet-js Blog","text":""},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/","title":"How to Compile the EPANET GUI","text":"<p>EPANET is a widely used hydraulic and water quality modeling software that is capable of simulating water distribution systems. While the software can be run using the provided executable file, some users may want to compile the GUI themselves to make customizations or improvements. This article will walk you through the steps of compiling the Graphical User Interface (GUI) for EPANET using Delphi Community Edition.</p> <p>Thanks to Oscar Vegas Ni\u00f1o for creating a guide in Spanish, which was of great help when I first attempted to compile the EPANET GUI.</p>"},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-1-download-the-source-code","title":"Step 1: Download the source code","text":"<p>First, download the EPANET 2.2 programmer\u2019s toolkit and the source code files from the EPANET website. Extract these zip files to your local drive.</p> <p>Download:  EPANET Source Code</p> <p> </p> Download the EPANET toolkit and GUI source code."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-2-download-delphi-community-edition","title":"Step 2: Download Delphi Community Edition","text":"<p>The EPANET GUI is written in Pascal, so you will need to download the Delphi Community Edition from the Embarcadero website. You will need to register and provide your email address to receive a serial code.</p> <p>Download:  Delphi Community Edition</p> <p> </p> Register to download Delphi Community Edition, and you will receive a serial code via email."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-3-install-delphi","title":"Step 3: Install Delphi","text":"<p>Once you have downloaded the installer, run it and select \u201cI already have a product serial number\u201d. Enter the serial number sent to your email and proceed with the installation. When prompted for what to install, only select \u201cDelphi Windows Community\u201d and deselect anything else. Then, select \u201cTeeChart Standard\u201d from the additional options and press install.</p> <p> </p> Install Delphi Windows Community Edition, and remember to select TeeChart Standard during the installation process."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-4-copy-the-toolkit-dll","title":"Step 4: Copy the toolkit DLL","text":"<p>In the GUI source code you downloaded, there will be a folder called Delphi_GUI which contains another folder called epanet2w. Inside the toolkit folder, there will be a DLL called epanet2.dll. Copy the DLL into the epanet2w folder.</p> <p> </p> Copy the epanet2.dll file from the EPANET toolkit to the epanet2w folder in the GUI source code."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-5-compile-and-install-the-components","title":"Step 5: Compile and install the components","text":"<p>Inside the Delphi_GUI folder, there will be two folders, \u201ccomponents\u201d and \u201cepanet2w\u201d. The components will need to be compiled, built and installed first. Go into the components folder and open Epa.dproj. This will load the Delphi IDE. Right-click on \u201cEpa.bpl\u201d and first select Compile, then right-click again and select Build. Finally, right-click again and select Install. This will create a folder named Win32 inside the components folder, which we will need to link to the GUI source code. You can now close the Delphi IDE.</p> <p> </p> Compile, build and install the EPANET components."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-6-configure-the-components","title":"Step 6: Configure the components","text":"<p>Navigate to the epanet2w folder and open Epanet2w.dproj to reopen the Delphi IDE. Configure the components by selecting Tools from the toolbar and then Options. In the Options menu, select Language &gt; Delphi &gt; Library. Add folders to Library path and Debug DCU path.</p> <p> </p> Configure the location of the components in the library options. <p>Select the three-dot button next to Library path, select the browse folder button, and navigate towards the Delphi_GUI\\epanet2w folder. Press add and then repeat with Delphi_GUI\\components. Press the three buttons next to Debug DCU path and add the folder Delphi_GUI\\epanet2w and Delphi_GUI\\components\\Win32\\Release.</p> <p> </p> Set the Library and Debug DCU paths."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#step-7-compile-and-run-epanet","title":"Step 7: Compile and run EPANET","text":"<p>Once the configuration is complete, you can compile and run EPANET by pressing the play button on the toolbar. This will open EPANET, and the compiled exe will be located in Delphi_GUI\\epanet2w.</p> <p> </p> Compile the GUI and launch EPANET by clicking on the 'play' button."},{"location":"blog/2023/04/09/how-to-compile-the-epanet-gui/#conclusion","title":"Conclusion","text":"<p>Compiling the GUI for EPANET using Delphi Community Edition may seem intimidating at first, but following these simple steps will help you achieve your goal. Once you have successfully compiled the GUI, you can begin customizing and improving EPANET to suit your needs.</p> <p> </p> After compiling the GUI, customize and improve EPANET as needed."},{"location":"blog/2023/01/04/epanet-js---the-water-distribution-modelling-engine-for-the-web/","title":"epanet-js - the water distribution modelling engine for the web!","text":"<p>EPANET is a powerful hydraulic analysis software that is widely used in the water distribution industry. It allows users to model and analyze the behavior of water distribution systems, including the flow of water through pipes, the pressure at various points in the system, and water quality behaviour within the network.</p> <p>EPANET has been an invaluable tool for engineers and water utilities for many years, but until recently, the programmers toolkit which allowed you to develop on top of it was only avaiable in languages focused on desktop development or scientific research. This meant that users had to install the software on their local machines in order to use it, and it was not possible to access the toolkit from a web browser.</p> <p>To address this limitation, we have developed epanet-js, which allows developers to build web applications using the EPANET engine. This opens up a whole new world of possibilities for using EPANET in a variety of contexts, including in the development of online tools for water utilities, or as part of larger software systems that require hydraulic analysis capabilities.</p> <p>One of the key benefits of epanet-js is that it allows users to access the power of EPANET from any device with a web browser, without the need to install any software. This makes it much easier to share and collaborate on hydraulic analysis projects, and allows users to access the tool from anywhere, at any time.</p> <p>In addition, epanet-js is fully open source, which means that developers are free to use, modify, and distribute the code as they see fit. This opens up even more opportunities for innovation and customization, and allows developers to build custom solutions that meet the specific needs of their users.</p> <p>Overall, the release of epanet-js represents a major step forward for the water distribution industry, and we are excited to see what creative and innovative uses developers come up with for this powerful tool.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/","title":"epanet-js August 2025 Progress Report","text":"<p>Introducing Customer Points, a UI Refresh, and More!</p> <p>August was a huge month for epanet-js! We've been working hard on one of our biggest features yet, focused on making it dramatically easier to get accurate demand data into your models.</p> <p>Alongside that, we\u2019ve rolled out a some UI refreshers to improve your workflow, added a new language, and squashed some important bugs.</p> Customer points are now in epanet-js! <p>We're also hosting our very first live webinar! Join us on October 1st to hear the story behind epanet-js, see the latest features in action, and learn about what\u2019s next. It\u2019s a great chance to connect with us directly, and we\u2019d love to see you there.</p> <p>Let's dive into what's new.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#the-easiest-way-to-model-water-demand","title":"The Easiest Way to Model Water Demand","text":"<p>We know one of the biggest challenges in building an accurate hydraulic model is allocating demands correctly. Traditionally, this has been a complex, time-consuming process often done outside of your main modeling tool. The best way to represent demand is to model it where it comes from: your individual customers.</p> <p>We're excited to announce that we've made this process incredibly simple with our new Customer Points feature!</p> <p>You can now import a GeoJSON file of your customers directly into epanet-js. Our new import wizard guides you through the process, automatically allocating each customer to the nearest pipe. Here\u2019s how it makes your life easier:</p> <ul> <li>Intelligent Allocation: The system uses a set of rules to connect customers to the right pipes. You can customize these rules, setting maximum pipe diameters and search distances to ensure customers are assigned logically (e.g., connect to smaller distribution mains before large transmission lines).</li> <li>Clear Demand Tracking: When you select a junction, you'll see a new Customer Demand field showing the total demand from all connected customers. You can click this field to see a list of every individual customer allocated to that junction.</li> <li>Easy Manual Adjustments: If a customer is assigned to the wrong pipe, you can easily Reconnect them. Just select the customer, click the reconnect tool, and click the correct pipe. It\u2019s that simple.</li> </ul> <p>We think this is a game-changing feature that will make it much faster to create, calibrate, and manage your models. What used to be a complex external task is now a streamlined, integrated part of your workflow.</p> <p>For a step-by-step walkthrough, check out our new guide: How to Import Customer Points.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#join-us-for-our-first-live-webinar","title":"Join Us for Our First Live Webinar!","text":"<p>Luke Butler</p> <p>Co-founder</p> <p>Sam Pay\u00e1</p> <p>Co-founder</p> <p>Want to see the new Customer Points feature in action and learn more about our vision for the future of water modeling? Join Sam and Luke on October 1st for our first community webinar. We'll be discussing why we built epanet-js, giving a live demo of the latest tools, and answering your questions. This is your chance to chat with us and connect with the growing epanet-js community.</p> <p>powered by Crowdcast</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#a-fresh-new-look-a-smoother-start","title":"A Fresh New Look &amp; A Smoother Start","text":"<p>We also dedicated time this month to improving the overall user experience, starting from the moment you open the app.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#a-modern-and-consistent-icon-set","title":"A Modern and Consistent Icon Set","text":"<p>We've refreshed the app with a new set of icons! We\u2019ve moved from the radix icon set to the much more extensive Lucide icon library. This gives us thousands of icons to choose from, allowing us to create a more modern, consistent, and intuitive interface. You'll notice that buttons and tools, like Save and Save As, are now much clearer and easier to understand at a glance.</p> Hover to see the previous version of the toolbar icons."},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#a-simpler-more-welcoming-start","title":"A Simpler, More Welcoming Start","text":"<p>First impressions matter. We've completely redesigned the welcome screen to be cleaner, simpler, and more helpful. The old screen was functional but cluttered. The new design guides you with clear, logical actions:</p> <ul> <li>Getting Started: A prominent button guides new users to the Quick Start Guide.</li> <li>Build and Develop: Quickly create a new project or open an existing one.</li> <li>Explore the app: Demo networks are clearly presented as a way to explore what epanet-js can do.</li> </ul> Hover to see the previous version of the welcome screen. <p>This new layout reduces friction and helps you get to work faster, whether you're a new user or a seasoned pro.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#start-your-project-in-the-right-place","title":"Start Your Project in the Right Place","text":"<p>We heard your feedback loud and clear: starting a new project and having to zoom out from a default location to find your own area was a pain. We've fixed this. When you create a new project, you can now search for your location in an autocomplete search box. The model will be created zoomed directly to the city, town, or area you're working in. No more needless panning and zooming just to get started!</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#making-epanet-js-more-global","title":"Making epanet-js More Global","text":"<p>Our international community continues to grow, and we've made some major strides in making the app more accessible to everyone.</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#welcome-japanese-speakers","title":"\u3088\u3046\u3053\u305d\uff01Welcome, Japanese Speakers!","text":"<p>We are thrilled to add Japanese as our fourth community language! A huge thank you to Yusuke Shinoda for his incredible effort in translating and providing feedback to ensure the accuracy was top-notch.</p> \u3088\u3046\u3053\u305d\uff01Welcome, Japanese Speakers!"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#smarter-translations-and-easier-access","title":"Smarter Translations and Easier Access","text":"<p>Previously, community-translated languages had to be activated manually in the settings. We now have enough confidence in our translation quality to enable community languages by default. If your browser is set to French, Dutch, Japanese, or Portuguese, epanet-js will now load in your language automatically.</p> <p>This was made possible by a major rewrite of our automated translation service. Building on last month's work, the new system is more robust, reliable, and scalable. It provides us with better notifications and allows us to add new languages much more quickly. Expect to see even more languages coming soon!</p>"},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#improvements-and-bug-squashing","title":"Improvements and Bug Squashing","text":""},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#corrected-import-connectivity","title":"Corrected Import Connectivity","text":"<p>We fixed a bug in the import process where assets with a specific ID format could cause junctions to be connected incorrectly. You can now safely use any ID format in your model build, and all connections will be made correctly.</p> Hover to see the network after the bug fix."},{"location":"blog/2025/09/08/epanet-js-august-2025-progress-report/#closing","title":"Closing","text":"<p>Thank you for your continued support and fantastic feedback. Seeing the community embrace these new tools fuels our work and reinforces the powerful demand for a more open and accessible future in water modeling.</p> <p>If you haven\u2019t already, please register for the upcoming webinar, even if you can\u2019t make it on the day, we\u2019ll send you a recording of the event!</p> <p>Thank you for supporting EPANET by using software that supports it back.</p>      Launch epanet-js. No login needed.      <p>\u2014 Luke and Sam</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/","title":"epanet-js July 2025 Progress Report","text":"<p>GIS Model Builds, New Languages, and More!</p> <p>It\u2019s been one month since we launched epanet-js, and the response from the community has been incredible. Sam and I have been blown away by the feedback and are thrilled that over 3,000 of you from all around the world have already used the tool.</p> GIS model builds are now in epanet-js! <p>We've been busy adding new features and improving the experience. Highlights this month include full support for tanks and check valves, plus support for three new languages: Dutch, Portuguese, and French.</p> <p>But the biggest news, and one of our most requested features, is finally here - GIS model builds!</p>      Launch epanet-js. No login needed."},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#build-your-model-from-gis-data","title":"Build Your Model from GIS Data","text":"<p>We heard you loud and clear: drawing an entire network from scratch is a huge, if not impossible, task. While this feature is core to most commercial tools, it's been missing from the classic EPANET experience for years. We made it our number one priority to change that.</p> <p>Now, you can bring your GIS data directly into epanet-js. For consultants building a new model for a utility or engineers who have their data on hand, this feature is a must.</p> <p>The import process is designed to be fast and flexible:</p> <ol> <li>Set Defaults: Start by choosing your default flow units and headloss formula.</li> <li>Import &amp; Assign Layers: Load your GIS files (both Shapefile and GeoJSON are supported!) and assign each layer to an EPANET element like pipes, tanks, or valves.</li> <li>Map Attributes: Tell epanet-js which data columns correspond to EPANET attributes like pipe diameters or element IDs.</li> </ol> <p>Our model builder then gets to work, intelligently connecting your network. It automatically handles connectivity for you\u2014joining pipe ends to create junctions, connecting pipes at T-intersections, and splitting pipes to correctly insert point assets like pumps and valves. It even generates unique IDs and calculates junction elevations automatically.</p> <p>As with everything in epanet-js, this process is built for speed. A moderate network of 10,000 pipes builds in under a second. We've even stress-tested networks of 200,000 pipes, which build in about ten seconds.</p> <p>And we're not stopping here. We have a few tricks up our sleeves to make this even faster, and we're already planning future additions to make the process smoother, like intelligently detecting the direction of assets (such as pumps and PRVs) and tools to help clean up messy GIS data.</p> <p>What used to take hours of manual (and less accurate) drawing can now be done before your coffee gets cold.</p> Watch the full model build process on YouTube."},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#more-realistic-models","title":"More Realistic Models","text":"<p>Tanks and Check Valves are Here!</p> <p>To help you create more accurate models of your water systems, we\u2019ve added two of the final major EPANET elements.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#tanks","title":"Tanks","text":"<p>While epanet-js currently runs steady-state simulations where tanks behave like reservoirs with a fixed head, we know how important it is to represent your network as it truly exists. You can now add tanks to your model, set their initial, minimum, and maximum levels, and define their geometry. This makes your models more intuitive and ensures that when you export your .inp file, it's ready for any future analysis in other applications.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#check-valves","title":"Check Valves","text":"<p>Sometimes referred to as non-return valves, check valves are simple but critical devices that ensure water flows in only one direction. This feature was essential for accurately modeling common scenarios like pump stations or pressure zone boundaries</p> <p>With tanks and check valves now included, you have a complete toolkit for laying out your network.</p>      Launch epanet-js now."},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#speaking-your-language-now-in-dutch-portuguese-french","title":"Speaking Your Language: Now in Dutch, Portuguese &amp; French","text":"<p>When we launched with English and Spanish, we were thrilled to see a global community embrace epanet-js from day one. However, this created a challenge: many of you were using your browser's built-in \"Translate Page\" feature, which we discovered was causing a tricky bug that made simulations fail.</p> epanet-js in English, Spanish, Portuguese, French, and Dutch. <p>To ensure the app was stable, we had to disable the browser's in-built translation tool. But we were determined to find a better way to support our international users.</p> <p></p> <p>Our first step was to build a more robust foundation. Sam replaced our original home-grown translation library with i18next, a powerful and widely-used solution. With that in place, we began adding community languages based on where you, our users, are coming from. Portuguese was an easy first choice, as users from Brazil are our third-largest group. French was next, followed by a fantastic community contribution for Dutch.</p> <p>But as we celebrated supporting five languages, we realized we had traded one problem for another. Every new feature or text change required complex manual updates, creating a significant maintenance burden. To keep moving fast, we knew we had to innovate.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#a-smarter-automated-way-to-translate","title":"A Smarter, Automated Way to Translate","text":"<p>This challenge led to another major project this month: a fully automated translation system. We built a script that automatically runs every morning, checking for any new text added to epanet-js, and uses Google's Gemini AI to translate only the changes. It cleverly includes the surrounding source text for context, ensuring high-quality and consistent translations.</p> <p>This system allows us to maintain many languages with minimal overhead. It means we can be more responsive, support even more of the community languages in the future, and make it easier for you to help!</p> <p>If you are a native speaker and spot a translation that could be improved, we\u2019d love your help. You can contribute directly via our GitHub locales repository.</p> Community languages are now automatically translated used Google's Gemini AI. <p>Finally, we\u2019ve published the script and its automated process as open source! So if you\u2019re using i18next or another internationalization library, you can also benefit from this work.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#improvements-and-bug-squashing","title":"Improvements and Bug Squashing","text":"<p>We also made a number of smaller tweaks and fixes to make your workflow smoother.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#improved-junction-visibility","title":"Improved Junction Visibility","text":"<p>A subtle but important change. We tweaked our automatic contrast logic so that junctions with light fill colors now have a more distinct outline, making them clearly visible even on light-colored satellite maps.</p> Watch the white junctions in the center to see the improved junction visibility."},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#no-more-accidental-moves","title":"No More Accidental Moves","text":"<p>We fixed a frustrating bug where clicking just outside a junction could accidentally move it. Now, you have to be much more deliberate to move a node, preventing unwanted changes to your layout.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#color-pipes-by-roughness","title":"Color Pipes by Roughness","text":"<p>You can now visualize pipe roughness directly on the map. This is a great way to get a quick overview of where older pipes (which cause more friction and headloss) are located in your network.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#drawing-tiny-pipes","title":"Drawing Tiny Pipes","text":"<p>Previously, trying to draw very short pipes at low zoom levels could cause a crash. We've fixed this, so you can now model even the smallest connections without issue.</p>"},{"location":"blog/2025/08/07/epanet-js-july-2025-progress-report/#closing","title":"Closing","text":"<p>Thank you again for an amazing first month. We're thrilled by the thousands of you using the app and blown away that over 1,000 people are now following our company, Iterating, on LinkedIn. This incredible growth shows a powerful public demand for change in the world of water modeling.</p> <p>If you haven\u2019t already, please give us a follow. You\u2019ll get the latest epanet-js updates as they happen, and your support helps build momentum for a more open and sustainable future.</p> <p>Support EPANET by using software that supports it back.</p>      Launch epanet-js. No login needed.      <p>\u2014 Luke and Sam</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/","title":"epanet-js September 2025 Progress Report","text":"<p>Roadmaps, Redrawing, and Reports!</p> <p>September was a milestone month for epanet-js. We\u2019ve been working hard not only on new tools to make building and editing networks faster, but also on opening up the direction of the project itself.</p> <p>This month, we introduced our public roadmap \u2014 a place where anyone can see what\u2019s coming next, share ideas, and help shape the future of epanet-js.</p> The new public roadmap is live \u2014 see what's coming next and help shape the future of epanet-js! <p>Alongside that, we hosted our first live webinar, rolled out new editing tools for reversing and redrawing pipes, improved the demo networks, and added new workflow features to make debugging and model cleanup even smoother.</p>      Launch epanet-js. No login needed."},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#product-updates-and-announcements","title":"Product Updates and Announcements","text":""},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#our-public-roadmap-is-live","title":"Our Public Roadmap Is Live","text":"<p>The biggest news this month is the launch of the epanet-js Roadmap!</p> <p>We\u2019ve made our entire development plan public so you can see what we\u2019re working on, what\u2019s planned next, and what ideas are still being explored. More importantly, you can now take part directly \u2014 vote on the features you\u2019d like to see, comment on ideas, or suggest new ones entirely.</p> <p>We believe epanet-js should be a community-led project. By opening up the roadmap, we\u2019re inviting everyone to help guide where we go next. Whether you\u2019re an engineer, researcher, or utility manager, your input will directly influence the priorities of future releases.</p> <p>The roadmap will automatically update as we move features from ideas into development, and you\u2019ll receive updates on the items you follow. It\u2019s a simple but powerful way to stay involved and help us build the tools you want to see.</p> Vote, comment, and follow along \u2014 your feedback now helps shape every feature in epanet-js."},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#watch-the-webinar-on-youtube","title":"Watch the Webinar on YouTube","text":"<p>Last week, we hosted our first community webinar, Introducing epanet-js, which brought together over a hundred people live and more than two hundred registrants in total. The response was incredible \u2014 thank you to everyone who joined us!</p> <p>In the session, we talked about the state of hydraulic modeling today, why we built epanet-js, and how we\u2019re building an open and sustainable future for the industry. We also gave a live demo of the app, shared what\u2019s next on our roadmap, introduced the Teams plan, and finished with a long Q\\&amp;A that covered everything from engine details to future features.</p> <p>If you missed it, you can now watch the full recording on YouTube. The video includes bookmarks so you can jump straight to the sections or questions that interest you most.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#introducing-the-teams-plan","title":"Introducing the Teams Plan","text":"<p>During the webinar, we also introduced the new Teams plan \u2014 designed for growing organizations that need flexibility and collaboration.</p> <p>Teams can now purchase floating licenses, pay by invoice, and receive volume discounts. The plan also includes priority support and access to additional features tailored for professional users.</p> <p>This is a great option for utilities and consultancies looking to use epanet-js across multiple users.</p> Introducing the Teams plan \u2014 flexible licensing and collaboration for organizations using epanet-js."},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#usage-and-growth","title":"Usage and Growth","text":"<p>We also shared some of our usage stats during the webinar, and the results have been amazing to see.</p> <p>There was an initial big spike when we launched in July \u2014 which naturally settled \u2014 but since then, activity has continued to climb as we\u2019ve added new features and refined the app.</p> <p>In September, we reached 1,839 monthly active users, up from 1,542 in August. Weekly and daily active users are also growing steadily, showing that more people are not just trying the app, but continuing to use it regularly.</p> <p>We\u2019re incredibly proud of this growth for a free, open-source app still early in development, and we know it\u2019s just the beginning.</p> <p> </p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#features-updates-and-improvements","title":"Features updates and improvements","text":""},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#select-assets-from-the-report","title":"Select Assets from the Report","text":"<p>One of the small but very useful additions this month is the ability to select assets directly from the EPANET report.</p> <p>When you click an item in the report, epanet-js will automatically pan and zoom the map to that asset and select it.</p> <p>This makes it much easier to debug issues, investigate results, or quickly understand what\u2019s happening in your model \u2014 for example, locating where a pump turned on or a valve changed state during a simulation.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#split-assets-when-drawing","title":"Split Assets When Drawing","text":"<p>Editing and extending networks just got easier.</p> <p>When drawing junctions on existing pipes, epanet-js will now automatically split those pipes for you. The same behavior applies when creating new pipes, pumps, or valves, or even when dragging an existing asset like a junction onto a pipe \u2014 it will snap into place and split the pipe automatically.</p> <p>This small change makes a big difference when cleaning up or building networks, saving time and reducing manual rework.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#reverse-link-direction","title":"Reverse Link Direction","text":"<p>You can now quickly reverse the direction of any link asset \u2014 including pipes, pumps, and valves \u2014 directly from the toolbar, context menu, or by pressing R on your keyboard.</p> <p>This flips the upstream and downstream nodes instantly, letting you fix incorrect orientations or adjust the layout of your network in seconds.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#redraw-pipes","title":"Redraw Pipes","text":"<p>We\u2019ve added a new way to reshape and reroute pipes without losing any of their properties.</p> <p>When you select a link (pipe, pump, or valve), you can activate the Redraw Tool from the toolbar, context menu, or by pressing E. The tool lets you pick a new upstream node, place new vertices, and then select the downstream node to complete the redraw.</p> <p>You\u2019ll see the old alignment in light blue, so you can easily adjust the geometry while keeping the original attributes like diameter and roughness. Whether you\u2019re fixing pipe geometry or connecting to a new part of the network, this tool keeps your data intact.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#updated-demo-networks","title":"Updated Demo Networks","text":"<p>Both of our demo networks \u2014 Drumchapel and Waterdown \u2014 have been updated to include customer points, giving everyone a chance to see how this feature works in action.</p> <p>If you open epanet-js for the first time, you\u2019ll see these demos right on the splash screen, ready to explore.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#bug-fixes","title":"Bug Fixes","text":"<p>We fixed a small but important issue where the Next button in the Model Build wizard could disappear if your browser window wasn\u2019t tall enough. You can now scroll and continue through the steps normally, even on smaller screens.</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#community-and-closing","title":"Community and Closing","text":""},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#community-highlights","title":"Community Highlights","text":"<p>One of the most rewarding parts of this project is seeing how people all over the world are using epanet-js and sharing it in their own work.</p> <p>This month, we saw more posts, videos, and discussions from the community \u2014 and we\u2019ll highlight a few of them here.</p> <p>We're deeply grateful for everyone who takes the time to talk about epanet-js publicly. It helps us reach new users and keep the conversation growing. If you do share something, remember to tag Iterating, Sam, or Luke, and we'll make sure to amplify it.</p> <p>Thank you John Paulo Agrimano, Moise K., Suherman suherman, Lucas Soma Capapelo, Geosaber, \u00c1lvaro Ribeiro, Victor Hern\u00e1n Garz\u00f3n and Yusuke Shinoda!</p>"},{"location":"blog/2025/10/07/epanet-js-september-2025-progress-report/#closing","title":"Closing","text":"<p>Thank you again for being part of this journey and for all the feedback that continues to shape epanet-js. The open discussions, ideas, and community support make all of this possible.</p> <p>Support EPANET by using software that supports it back.</p>      Launch epanet-js. No login needed.      <p>\u2014 Luke and Sam</p>"},{"location":"blog/2025/08/01/introducing-epanet-js/","title":"Introducing epanet-js","text":"<p>Fast, local-first water modeling right in your browser</p> <p>For decades, the U.S. EPA\u2019s EPANET engine has powered almost every hydraulic modeling tool on the market. Yet most of us still wrestle with either the \u201cclassic\u201d Windows interface \u2014 slow, dated, and held together by workarounds. Meanwhile, commercial platforms cost a fortune, lock up our data, and bury us in features we don\u2019t need.</p> <p>You deserve better.</p> <p></p>"},{"location":"blog/2025/08/01/introducing-epanet-js/#the-epanet-you-know-but-modern-and-enhanced","title":"The EPANET you know \u2014 but modern and enhanced","text":"<p>epanet-js brings the EPANET you already trust straight into your browser \u2014 no installs, no forced cloud, and no compromises on privacy or speed. Open a tab, start drawing your network or drop in an <code>.inp</code> file, and run simulations in seconds.</p> <p>We designed epanet-js to feel familiar yet fundamentally better. It's built on the same trusted EPANET engine, but we\u2019ve wrapped it in a smoother, faster interface with the modern features you actually need to get your work done. A core part of this is our local-first philosophy. Your privacy and security are paramount, so epanet-js works directly with files on your local computer. Your projects are run and saved on your machine by default, giving you full control. The cloud is an option if you need it, not a requirement.</p> <p>Our goal was to build a tool for working, not for troubleshooting. You can draw your network visually, clicking to add nodes and pipes while the software handles details like auto-junctions and automatic elevations. We\u2019ve finally brought essential features like undo/redo to the EPANET workflow, and you can sketch and analyze your networks against real-world layouts using satellite map overlays. Running a simulation is as quick as hitting the keyboard shortcut Shift + Enter. Pressure, flow, and velocity results are visualized on the map \u2014 clean, color-coded, and easy to interpret without overwhelming you with options.</p>"},{"location":"blog/2025/08/01/introducing-epanet-js/#why-were-doing-this","title":"Why we're doing this","text":"<p>Instead of improving the tools everyone depends on, progress stalled \u2014 and utilities, educators, and engineers with smaller budgets suffered. EPANET was a gift to our industry. But over the years, we watched commercial vendors take its open-source code, build proprietary tools, and lock away improvements behind expensive licenses. The community was left behind.</p> <p>That\u2019s backwards \u2014 and epanet-js is our answer.</p> <p>We're building an affordable, easy-to-use tool that protects your privacy and helps create a sustainable future for open-source development. When you support epanet-js, you're supporting EPANET itself. We use a Functional Source License (FSL) that keeps our code public from day one and makes it fully open-source (MIT) after two years. This model allows us to innovate while ensuring the entire community benefits in the long run.</p> <p>Ready to see for yourself?</p> <p>Launch epanet-js now. No login needed.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"blog/category/progress-report/","title":"Progress Report","text":""},{"location":"blog/category/epanet/","title":"EPANET","text":""},{"location":"blog/category/user-interface/","title":"User Interface","text":""}]}